import {
  dist_exports2 as dist_exports,
  init_dist,
  require_crypto
} from "./chunk-7NPXLBJ2.js";
import {
  __commonJS,
  __esm,
  __export,
  __toCommonJS
} from "./chunk-V4OQ3NZ2.js";

// node_modules/@teachablemachine/image/dist/utils/tf.js
var require_tf = __commonJS({
  "node_modules/@teachablemachine/image/dist/utils/tf.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.cropTensor = exports.capture = void 0;
    var tf = (init_dist(), __toCommonJS(dist_exports));
    function capture(rasterElement, grayscale) {
      return tf.tidy(function() {
        var pixels = tf.browser.fromPixels(rasterElement);
        var cropped = cropTensor(pixels, grayscale);
        var batchedImage = cropped.expandDims(0);
        return batchedImage.toFloat().div(tf.scalar(127)).sub(tf.scalar(1));
      });
    }
    exports.capture = capture;
    function cropTensor(img, grayscaleModel, grayscaleInput) {
      var size = Math.min(img.shape[0], img.shape[1]);
      var centerHeight = img.shape[0] / 2;
      var beginHeight = centerHeight - size / 2;
      var centerWidth = img.shape[1] / 2;
      var beginWidth = centerWidth - size / 2;
      if (grayscaleModel && !grayscaleInput) {
        var grayscale_cropped = img.slice([beginHeight, beginWidth, 0], [size, size, 3]);
        grayscale_cropped = grayscale_cropped.reshape([size * size, 1, 3]);
        var rgb_weights = [0.2989, 0.587, 0.114];
        grayscale_cropped = tf.mul(grayscale_cropped, rgb_weights);
        grayscale_cropped = grayscale_cropped.reshape([size, size, 3]);
        grayscale_cropped = tf.sum(grayscale_cropped, -1);
        grayscale_cropped = tf.expandDims(grayscale_cropped, -1);
        return grayscale_cropped;
      }
      return img.slice([beginHeight, beginWidth, 0], [size, size, 3]);
    }
    exports.cropTensor = cropTensor;
  }
});

// node_modules/@teachablemachine/image/dist/utils/canvas.js
var require_canvas = __commonJS({
  "node_modules/@teachablemachine/image/dist/utils/canvas.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.cropTo = exports.resizeMinTo = exports.resizeMaxTo = exports.resize = void 0;
    var newCanvas = function() {
      return document.createElement("canvas");
    };
    function resize(image, scale, canvas) {
      if (canvas === void 0) {
        canvas = newCanvas();
      }
      canvas.width = image.width * scale;
      canvas.height = image.height * scale;
      var ctx = canvas.getContext("2d");
      ctx.drawImage(image, 0, 0, canvas.width, canvas.height);
      return canvas;
    }
    exports.resize = resize;
    function resizeMaxTo(image, maxSize, canvas) {
      if (canvas === void 0) {
        canvas = newCanvas();
      }
      var max = Math.max(image.width, image.height);
      return resize(image, maxSize / max, canvas);
    }
    exports.resizeMaxTo = resizeMaxTo;
    function resizeMinTo(image, minSize, canvas) {
      if (canvas === void 0) {
        canvas = newCanvas();
      }
      var min = Math.min(image.width, image.height);
      return resize(image, minSize / min, canvas);
    }
    exports.resizeMinTo = resizeMinTo;
    function cropTo(image, size, flipped, canvas) {
      if (flipped === void 0) {
        flipped = false;
      }
      if (canvas === void 0) {
        canvas = newCanvas();
      }
      var width = image.width;
      var height = image.height;
      if (image instanceof HTMLVideoElement) {
        width = image.videoWidth;
        height = image.videoHeight;
      }
      var min = Math.min(width, height);
      var scale = size / min;
      var scaledW = Math.ceil(width * scale);
      var scaledH = Math.ceil(height * scale);
      var dx = scaledW - size;
      var dy = scaledH - size;
      canvas.width = canvas.height = size;
      var ctx = canvas.getContext("2d");
      ctx.drawImage(image, ~~(dx / 2) * -1, ~~(dy / 2) * -1, scaledW, scaledH);
      if (flipped) {
        ctx.scale(-1, 1);
        ctx.drawImage(canvas, size * -1, 0);
      }
      return canvas;
    }
    exports.cropTo = cropTo;
  }
});

// node_modules/@teachablemachine/image/dist/version.js
var require_version = __commonJS({
  "node_modules/@teachablemachine/image/dist/version.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.version = void 0;
    var version = "0.8.4-alpha2";
    exports.version = version;
  }
});

// node_modules/@teachablemachine/image/dist/custom-mobilenet.js
var require_custom_mobilenet = __commonJS({
  "node_modules/@teachablemachine/image/dist/custom-mobilenet.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1) throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;
            case 4:
              _.label++;
              return { value: op[1], done: false };
            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;
            case 7:
              op = _.ops.pop();
              _.trys.pop();
              continue;
            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }
              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }
              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }
              if (t && _.label < t[2]) {
                _.label = t[2];
                _.ops.push(op);
                break;
              }
              if (t[2]) _.ops.pop();
              _.trys.pop();
              continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.loadFromFiles = exports.load = exports.loadTruncatedMobileNet = exports.CustomMobileNet = exports.getTopKClasses = exports.IMAGE_SIZE = void 0;
    var tf = (init_dist(), __toCommonJS(dist_exports));
    var tfjs_1 = (init_dist(), __toCommonJS(dist_exports));
    var tf_1 = require_tf();
    var canvas_1 = require_canvas();
    var version_1 = require_version();
    var DEFAULT_MOBILENET_VERSION = 1;
    var DEFAULT_TRAINING_LAYER_V1 = "conv_pw_13_relu";
    var DEFAULT_TRAINING_LAYER_V2 = "out_relu";
    var DEFAULT_ALPHA_V1 = 0.25;
    var DEFAULT_ALPHA_V2 = 0.35;
    exports.IMAGE_SIZE = 224;
    var fillMetadata = function(data) {
      data.packageVersion = data.packageVersion || version_1.version;
      data.packageName = data.packageName || "@teachablemachine/image";
      data.timeStamp = data.timeStamp || (/* @__PURE__ */ new Date()).toISOString();
      data.userMetadata = data.userMetadata || {};
      data.modelName = data.modelName || "untitled";
      data.labels = data.labels || [];
      data.imageSize = data.imageSize || exports.IMAGE_SIZE;
      return data;
    };
    var isMetadata = function(c) {
      return !!c && Array.isArray(c.labels);
    };
    var isAlphaValid = function(version, alpha) {
      if (version === 1) {
        if (alpha !== 0.25 && alpha !== 0.5 && alpha !== 0.75 && alpha !== 1) {
          console.warn("Invalid alpha. Options are: 0.25, 0.50, 0.75 or 1.00.");
          console.log("Loading model with alpha: ", DEFAULT_ALPHA_V1.toFixed(2));
          return DEFAULT_ALPHA_V1;
        }
      } else {
        if (alpha !== 0.35 && alpha !== 0.5 && alpha !== 0.75 && alpha !== 1) {
          console.warn("Invalid alpha. Options are: 0.35, 0.50, 0.75 or 1.00.");
          console.log("Loading model with alpha: ", DEFAULT_ALPHA_V2.toFixed(2));
          return DEFAULT_ALPHA_V2;
        }
      }
      return alpha;
    };
    var parseModelOptions = function(options) {
      options = options || {};
      if (options.checkpointUrl && options.trainingLayer) {
        if (options.alpha || options.version) {
          console.warn("Checkpoint URL passed to modelOptions, alpha options are ignored");
        }
        return [options.checkpointUrl, options.trainingLayer];
      } else {
        options.version = options.version || DEFAULT_MOBILENET_VERSION;
        if (options.version === 1) {
          options.alpha = options.alpha || DEFAULT_ALPHA_V1;
          options.alpha = isAlphaValid(options.version, options.alpha);
          console.log("Loading mobilenet " + options.version + " and alpha " + options.alpha);
          var alphaString = options.alpha.toFixed(2);
          if (alphaString === "1.00") {
            alphaString = "1.0";
          }
          return [
            // tslint:disable-next-line:max-line-length        
            "https://storage.googleapis.com/tfjs-models/tfjs/mobilenet_v1_" + alphaString + "_" + exports.IMAGE_SIZE + "/model.json",
            DEFAULT_TRAINING_LAYER_V1
          ];
        } else if (options.version === 2) {
          options.alpha = options.alpha || DEFAULT_ALPHA_V2;
          options.alpha = isAlphaValid(options.version, options.alpha);
          console.log("Loading mobilenet " + options.version + " and alpha " + options.alpha);
          return [
            // tslint:disable-next-line:max-line-length        
            "https://storage.googleapis.com/teachable-machine-models/mobilenet_v2_weights_tf_dim_ordering_tf_kernels_" + options.alpha.toFixed(2) + "_" + exports.IMAGE_SIZE + "_no_top/model.json",
            DEFAULT_TRAINING_LAYER_V2
          ];
        } else {
          throw new Error("MobileNet V" + options.version + " doesn't exist");
        }
      }
    };
    var processMetadata = function(metadata) {
      return __awaiter(void 0, void 0, void 0, function() {
        var metadataJSON, metadataResponse;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              if (!(typeof metadata === "string")) return [3, 3];
              return [4, fetch(metadata)];
            case 1:
              metadataResponse = _a.sent();
              return [4, metadataResponse.json()];
            case 2:
              metadataJSON = _a.sent();
              return [3, 4];
            case 3:
              if (isMetadata(metadata)) {
                metadataJSON = metadata;
              } else {
                throw new Error("Invalid Metadata provided");
              }
              _a.label = 4;
            case 4:
              return [2, fillMetadata(metadataJSON)];
          }
        });
      });
    };
    function getTopKClasses(labels, logits, topK) {
      if (topK === void 0) {
        topK = 3;
      }
      return __awaiter(this, void 0, void 0, function() {
        var values;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, logits.data()];
            case 1:
              values = _a.sent();
              return [2, tf.tidy(function() {
                topK = Math.min(topK, values.length);
                var valuesAndIndices = [];
                for (var i = 0; i < values.length; i++) {
                  valuesAndIndices.push({ value: values[i], index: i });
                }
                valuesAndIndices.sort(function(a, b) {
                  return b.value - a.value;
                });
                var topkValues = new Float32Array(topK);
                var topkIndices = new Int32Array(topK);
                for (var i = 0; i < topK; i++) {
                  topkValues[i] = valuesAndIndices[i].value;
                  topkIndices[i] = valuesAndIndices[i].index;
                }
                var topClassesAndProbs = [];
                for (var i = 0; i < topkIndices.length; i++) {
                  topClassesAndProbs.push({
                    className: labels[topkIndices[i]],
                    probability: topkValues[i]
                  });
                }
                return topClassesAndProbs;
              })];
          }
        });
      });
    }
    exports.getTopKClasses = getTopKClasses;
    var CustomMobileNet = (
      /** @class */
      function() {
        function CustomMobileNet2(model, metadata) {
          this.model = model;
          this._metadata = fillMetadata(metadata);
        }
        Object.defineProperty(CustomMobileNet2, "EXPECTED_IMAGE_SIZE", {
          get: function() {
            return exports.IMAGE_SIZE;
          },
          enumerable: false,
          configurable: true
        });
        CustomMobileNet2.prototype.getMetadata = function() {
          return this._metadata;
        };
        CustomMobileNet2.prototype.getTotalClasses = function() {
          var output = this.model.output;
          var totalClasses = output.shape[1];
          return totalClasses;
        };
        CustomMobileNet2.prototype.getClassLabels = function() {
          return this._metadata.labels;
        };
        CustomMobileNet2.prototype.predictTopK = function(image, maxPredictions, flipped) {
          if (maxPredictions === void 0) {
            maxPredictions = 10;
          }
          if (flipped === void 0) {
            flipped = false;
          }
          return __awaiter(this, void 0, void 0, function() {
            var croppedImage, logits, classes;
            var _this = this;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  croppedImage = canvas_1.cropTo(image, this._metadata.imageSize, flipped);
                  logits = tf.tidy(function() {
                    var captured = tf_1.capture(croppedImage, _this._metadata.grayscale);
                    return _this.model.predict(captured);
                  });
                  return [4, getTopKClasses(this._metadata.labels, logits, maxPredictions)];
                case 1:
                  classes = _a.sent();
                  tfjs_1.dispose(logits);
                  return [2, classes];
              }
            });
          });
        };
        CustomMobileNet2.prototype.predict = function(image, flipped) {
          if (flipped === void 0) {
            flipped = false;
          }
          return __awaiter(this, void 0, void 0, function() {
            var croppedImage, logits, values, classes, i;
            var _this = this;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  croppedImage = canvas_1.cropTo(image, this._metadata.imageSize, flipped);
                  logits = tf.tidy(function() {
                    var captured = tf_1.capture(croppedImage, _this._metadata.grayscale);
                    return _this.model.predict(captured);
                  });
                  return [4, logits.data()];
                case 1:
                  values = _a.sent();
                  classes = [];
                  for (i = 0; i < values.length; i++) {
                    classes.push({
                      className: this._metadata.labels[i],
                      probability: values[i]
                    });
                  }
                  tfjs_1.dispose(logits);
                  return [2, classes];
              }
            });
          });
        };
        CustomMobileNet2.prototype.dispose = function() {
          this.truncatedModel.dispose();
        };
        return CustomMobileNet2;
      }()
    );
    exports.CustomMobileNet = CustomMobileNet;
    function loadTruncatedMobileNet(modelOptions) {
      return __awaiter(this, void 0, void 0, function() {
        var _a, checkpointUrl, trainingLayer, mobilenet, layer, truncatedModel, model, layer, truncatedModel, model;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              _a = parseModelOptions(modelOptions), checkpointUrl = _a[0], trainingLayer = _a[1];
              return [4, tf.loadLayersModel(checkpointUrl)];
            case 1:
              mobilenet = _b.sent();
              if (modelOptions && modelOptions.version === 1) {
                layer = mobilenet.getLayer(trainingLayer);
                truncatedModel = tf.model({ inputs: mobilenet.inputs, outputs: layer.output });
                model = tf.sequential();
                model.add(truncatedModel);
                model.add(tf.layers.flatten());
                return [2, model];
              } else {
                layer = mobilenet.getLayer(trainingLayer);
                truncatedModel = tf.model({ inputs: mobilenet.inputs, outputs: layer.output });
                model = tf.sequential();
                model.add(truncatedModel);
                model.add(tf.layers.globalAveragePooling2d({}));
                return [2, model];
              }
              return [
                2
                /*return*/
              ];
          }
        });
      });
    }
    exports.loadTruncatedMobileNet = loadTruncatedMobileNet;
    function load(model, metadata) {
      return __awaiter(this, void 0, void 0, function() {
        var customModel, metadataJSON, _a;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              return [4, tf.loadLayersModel(model)];
            case 1:
              customModel = _b.sent();
              if (!metadata) return [3, 3];
              return [4, processMetadata(metadata)];
            case 2:
              _a = _b.sent();
              return [3, 4];
            case 3:
              _a = null;
              _b.label = 4;
            case 4:
              metadataJSON = _a;
              return [2, new CustomMobileNet(customModel, metadataJSON)];
          }
        });
      });
    }
    exports.load = load;
    function loadFromFiles(model, weights, metadata) {
      return __awaiter(this, void 0, void 0, function() {
        var customModel, metadataFile, metadataJSON, _a;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              return [4, tf.loadLayersModel(tf.io.browserFiles([model, weights]))];
            case 1:
              customModel = _b.sent();
              return [4, new Response(metadata).json()];
            case 2:
              metadataFile = _b.sent();
              if (!metadata) return [3, 4];
              return [4, processMetadata(metadataFile)];
            case 3:
              _a = _b.sent();
              return [3, 5];
            case 4:
              _a = null;
              _b.label = 5;
            case 5:
              metadataJSON = _a;
              return [2, new CustomMobileNet(customModel, metadataJSON)];
          }
        });
      });
    }
    exports.loadFromFiles = loadFromFiles;
  }
});

// node_modules/@teachablemachine/image/node_modules/seedrandom/lib/alea.js
var require_alea = __commonJS({
  "node_modules/@teachablemachine/image/node_modules/seedrandom/lib/alea.js"(exports, module) {
    (function(global, module2, define2) {
      function Alea(seed) {
        var me = this, mash = Mash();
        me.next = function() {
          var t = 2091639 * me.s0 + me.c * 23283064365386963e-26;
          me.s0 = me.s1;
          me.s1 = me.s2;
          return me.s2 = t - (me.c = t | 0);
        };
        me.c = 1;
        me.s0 = mash(" ");
        me.s1 = mash(" ");
        me.s2 = mash(" ");
        me.s0 -= mash(seed);
        if (me.s0 < 0) {
          me.s0 += 1;
        }
        me.s1 -= mash(seed);
        if (me.s1 < 0) {
          me.s1 += 1;
        }
        me.s2 -= mash(seed);
        if (me.s2 < 0) {
          me.s2 += 1;
        }
        mash = null;
      }
      function copy(f, t) {
        t.c = f.c;
        t.s0 = f.s0;
        t.s1 = f.s1;
        t.s2 = f.s2;
        return t;
      }
      function impl(seed, opts) {
        var xg = new Alea(seed), state = opts && opts.state, prng = xg.next;
        prng.int32 = function() {
          return xg.next() * 4294967296 | 0;
        };
        prng.double = function() {
          return prng() + (prng() * 2097152 | 0) * 11102230246251565e-32;
        };
        prng.quick = prng;
        if (state) {
          if (typeof state == "object") copy(state, xg);
          prng.state = function() {
            return copy(xg, {});
          };
        }
        return prng;
      }
      function Mash() {
        var n = 4022871197;
        var mash = function(data) {
          data = data.toString();
          for (var i = 0; i < data.length; i++) {
            n += data.charCodeAt(i);
            var h = 0.02519603282416938 * n;
            n = h >>> 0;
            h -= n;
            h *= n;
            n = h >>> 0;
            h -= n;
            n += h * 4294967296;
          }
          return (n >>> 0) * 23283064365386963e-26;
        };
        return mash;
      }
      if (module2 && module2.exports) {
        module2.exports = impl;
      } else if (define2 && define2.amd) {
        define2(function() {
          return impl;
        });
      } else {
        this.alea = impl;
      }
    })(
      exports,
      typeof module == "object" && module,
      // present in node.js
      typeof define == "function" && define
      // present with an AMD loader
    );
  }
});

// node_modules/@teachablemachine/image/node_modules/seedrandom/lib/xor128.js
var require_xor128 = __commonJS({
  "node_modules/@teachablemachine/image/node_modules/seedrandom/lib/xor128.js"(exports, module) {
    (function(global, module2, define2) {
      function XorGen(seed) {
        var me = this, strseed = "";
        me.x = 0;
        me.y = 0;
        me.z = 0;
        me.w = 0;
        me.next = function() {
          var t = me.x ^ me.x << 11;
          me.x = me.y;
          me.y = me.z;
          me.z = me.w;
          return me.w ^= me.w >>> 19 ^ t ^ t >>> 8;
        };
        if (seed === (seed | 0)) {
          me.x = seed;
        } else {
          strseed += seed;
        }
        for (var k = 0; k < strseed.length + 64; k++) {
          me.x ^= strseed.charCodeAt(k) | 0;
          me.next();
        }
      }
      function copy(f, t) {
        t.x = f.x;
        t.y = f.y;
        t.z = f.z;
        t.w = f.w;
        return t;
      }
      function impl(seed, opts) {
        var xg = new XorGen(seed), state = opts && opts.state, prng = function() {
          return (xg.next() >>> 0) / 4294967296;
        };
        prng.double = function() {
          do {
            var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 4294967296, result = (top + bot) / (1 << 21);
          } while (result === 0);
          return result;
        };
        prng.int32 = xg.next;
        prng.quick = prng;
        if (state) {
          if (typeof state == "object") copy(state, xg);
          prng.state = function() {
            return copy(xg, {});
          };
        }
        return prng;
      }
      if (module2 && module2.exports) {
        module2.exports = impl;
      } else if (define2 && define2.amd) {
        define2(function() {
          return impl;
        });
      } else {
        this.xor128 = impl;
      }
    })(
      exports,
      typeof module == "object" && module,
      // present in node.js
      typeof define == "function" && define
      // present with an AMD loader
    );
  }
});

// node_modules/@teachablemachine/image/node_modules/seedrandom/lib/xorwow.js
var require_xorwow = __commonJS({
  "node_modules/@teachablemachine/image/node_modules/seedrandom/lib/xorwow.js"(exports, module) {
    (function(global, module2, define2) {
      function XorGen(seed) {
        var me = this, strseed = "";
        me.next = function() {
          var t = me.x ^ me.x >>> 2;
          me.x = me.y;
          me.y = me.z;
          me.z = me.w;
          me.w = me.v;
          return (me.d = me.d + 362437 | 0) + (me.v = me.v ^ me.v << 4 ^ (t ^ t << 1)) | 0;
        };
        me.x = 0;
        me.y = 0;
        me.z = 0;
        me.w = 0;
        me.v = 0;
        if (seed === (seed | 0)) {
          me.x = seed;
        } else {
          strseed += seed;
        }
        for (var k = 0; k < strseed.length + 64; k++) {
          me.x ^= strseed.charCodeAt(k) | 0;
          if (k == strseed.length) {
            me.d = me.x << 10 ^ me.x >>> 4;
          }
          me.next();
        }
      }
      function copy(f, t) {
        t.x = f.x;
        t.y = f.y;
        t.z = f.z;
        t.w = f.w;
        t.v = f.v;
        t.d = f.d;
        return t;
      }
      function impl(seed, opts) {
        var xg = new XorGen(seed), state = opts && opts.state, prng = function() {
          return (xg.next() >>> 0) / 4294967296;
        };
        prng.double = function() {
          do {
            var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 4294967296, result = (top + bot) / (1 << 21);
          } while (result === 0);
          return result;
        };
        prng.int32 = xg.next;
        prng.quick = prng;
        if (state) {
          if (typeof state == "object") copy(state, xg);
          prng.state = function() {
            return copy(xg, {});
          };
        }
        return prng;
      }
      if (module2 && module2.exports) {
        module2.exports = impl;
      } else if (define2 && define2.amd) {
        define2(function() {
          return impl;
        });
      } else {
        this.xorwow = impl;
      }
    })(
      exports,
      typeof module == "object" && module,
      // present in node.js
      typeof define == "function" && define
      // present with an AMD loader
    );
  }
});

// node_modules/@teachablemachine/image/node_modules/seedrandom/lib/xorshift7.js
var require_xorshift7 = __commonJS({
  "node_modules/@teachablemachine/image/node_modules/seedrandom/lib/xorshift7.js"(exports, module) {
    (function(global, module2, define2) {
      function XorGen(seed) {
        var me = this;
        me.next = function() {
          var X = me.x, i = me.i, t, v, w;
          t = X[i];
          t ^= t >>> 7;
          v = t ^ t << 24;
          t = X[i + 1 & 7];
          v ^= t ^ t >>> 10;
          t = X[i + 3 & 7];
          v ^= t ^ t >>> 3;
          t = X[i + 4 & 7];
          v ^= t ^ t << 7;
          t = X[i + 7 & 7];
          t = t ^ t << 13;
          v ^= t ^ t << 9;
          X[i] = v;
          me.i = i + 1 & 7;
          return v;
        };
        function init(me2, seed2) {
          var j, w, X = [];
          if (seed2 === (seed2 | 0)) {
            w = X[0] = seed2;
          } else {
            seed2 = "" + seed2;
            for (j = 0; j < seed2.length; ++j) {
              X[j & 7] = X[j & 7] << 15 ^ seed2.charCodeAt(j) + X[j + 1 & 7] << 13;
            }
          }
          while (X.length < 8) X.push(0);
          for (j = 0; j < 8 && X[j] === 0; ++j) ;
          if (j == 8) w = X[7] = -1;
          else w = X[j];
          me2.x = X;
          me2.i = 0;
          for (j = 256; j > 0; --j) {
            me2.next();
          }
        }
        init(me, seed);
      }
      function copy(f, t) {
        t.x = f.x.slice();
        t.i = f.i;
        return t;
      }
      function impl(seed, opts) {
        if (seed == null) seed = +/* @__PURE__ */ new Date();
        var xg = new XorGen(seed), state = opts && opts.state, prng = function() {
          return (xg.next() >>> 0) / 4294967296;
        };
        prng.double = function() {
          do {
            var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 4294967296, result = (top + bot) / (1 << 21);
          } while (result === 0);
          return result;
        };
        prng.int32 = xg.next;
        prng.quick = prng;
        if (state) {
          if (state.x) copy(state, xg);
          prng.state = function() {
            return copy(xg, {});
          };
        }
        return prng;
      }
      if (module2 && module2.exports) {
        module2.exports = impl;
      } else if (define2 && define2.amd) {
        define2(function() {
          return impl;
        });
      } else {
        this.xorshift7 = impl;
      }
    })(
      exports,
      typeof module == "object" && module,
      // present in node.js
      typeof define == "function" && define
      // present with an AMD loader
    );
  }
});

// node_modules/@teachablemachine/image/node_modules/seedrandom/lib/xor4096.js
var require_xor4096 = __commonJS({
  "node_modules/@teachablemachine/image/node_modules/seedrandom/lib/xor4096.js"(exports, module) {
    (function(global, module2, define2) {
      function XorGen(seed) {
        var me = this;
        me.next = function() {
          var w = me.w, X = me.X, i = me.i, t, v;
          me.w = w = w + 1640531527 | 0;
          v = X[i + 34 & 127];
          t = X[i = i + 1 & 127];
          v ^= v << 13;
          t ^= t << 17;
          v ^= v >>> 15;
          t ^= t >>> 12;
          v = X[i] = v ^ t;
          me.i = i;
          return v + (w ^ w >>> 16) | 0;
        };
        function init(me2, seed2) {
          var t, v, i, j, w, X = [], limit = 128;
          if (seed2 === (seed2 | 0)) {
            v = seed2;
            seed2 = null;
          } else {
            seed2 = seed2 + "\0";
            v = 0;
            limit = Math.max(limit, seed2.length);
          }
          for (i = 0, j = -32; j < limit; ++j) {
            if (seed2) v ^= seed2.charCodeAt((j + 32) % seed2.length);
            if (j === 0) w = v;
            v ^= v << 10;
            v ^= v >>> 15;
            v ^= v << 4;
            v ^= v >>> 13;
            if (j >= 0) {
              w = w + 1640531527 | 0;
              t = X[j & 127] ^= v + w;
              i = 0 == t ? i + 1 : 0;
            }
          }
          if (i >= 128) {
            X[(seed2 && seed2.length || 0) & 127] = -1;
          }
          i = 127;
          for (j = 4 * 128; j > 0; --j) {
            v = X[i + 34 & 127];
            t = X[i = i + 1 & 127];
            v ^= v << 13;
            t ^= t << 17;
            v ^= v >>> 15;
            t ^= t >>> 12;
            X[i] = v ^ t;
          }
          me2.w = w;
          me2.X = X;
          me2.i = i;
        }
        init(me, seed);
      }
      function copy(f, t) {
        t.i = f.i;
        t.w = f.w;
        t.X = f.X.slice();
        return t;
      }
      ;
      function impl(seed, opts) {
        if (seed == null) seed = +/* @__PURE__ */ new Date();
        var xg = new XorGen(seed), state = opts && opts.state, prng = function() {
          return (xg.next() >>> 0) / 4294967296;
        };
        prng.double = function() {
          do {
            var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 4294967296, result = (top + bot) / (1 << 21);
          } while (result === 0);
          return result;
        };
        prng.int32 = xg.next;
        prng.quick = prng;
        if (state) {
          if (state.X) copy(state, xg);
          prng.state = function() {
            return copy(xg, {});
          };
        }
        return prng;
      }
      if (module2 && module2.exports) {
        module2.exports = impl;
      } else if (define2 && define2.amd) {
        define2(function() {
          return impl;
        });
      } else {
        this.xor4096 = impl;
      }
    })(
      exports,
      // window object or global
      typeof module == "object" && module,
      // present in node.js
      typeof define == "function" && define
      // present with an AMD loader
    );
  }
});

// node_modules/@teachablemachine/image/node_modules/seedrandom/lib/tychei.js
var require_tychei = __commonJS({
  "node_modules/@teachablemachine/image/node_modules/seedrandom/lib/tychei.js"(exports, module) {
    (function(global, module2, define2) {
      function XorGen(seed) {
        var me = this, strseed = "";
        me.next = function() {
          var b = me.b, c = me.c, d = me.d, a = me.a;
          b = b << 25 ^ b >>> 7 ^ c;
          c = c - d | 0;
          d = d << 24 ^ d >>> 8 ^ a;
          a = a - b | 0;
          me.b = b = b << 20 ^ b >>> 12 ^ c;
          me.c = c = c - d | 0;
          me.d = d << 16 ^ c >>> 16 ^ a;
          return me.a = a - b | 0;
        };
        me.a = 0;
        me.b = 0;
        me.c = 2654435769 | 0;
        me.d = 1367130551;
        if (seed === Math.floor(seed)) {
          me.a = seed / 4294967296 | 0;
          me.b = seed | 0;
        } else {
          strseed += seed;
        }
        for (var k = 0; k < strseed.length + 20; k++) {
          me.b ^= strseed.charCodeAt(k) | 0;
          me.next();
        }
      }
      function copy(f, t) {
        t.a = f.a;
        t.b = f.b;
        t.c = f.c;
        t.d = f.d;
        return t;
      }
      ;
      function impl(seed, opts) {
        var xg = new XorGen(seed), state = opts && opts.state, prng = function() {
          return (xg.next() >>> 0) / 4294967296;
        };
        prng.double = function() {
          do {
            var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 4294967296, result = (top + bot) / (1 << 21);
          } while (result === 0);
          return result;
        };
        prng.int32 = xg.next;
        prng.quick = prng;
        if (state) {
          if (typeof state == "object") copy(state, xg);
          prng.state = function() {
            return copy(xg, {});
          };
        }
        return prng;
      }
      if (module2 && module2.exports) {
        module2.exports = impl;
      } else if (define2 && define2.amd) {
        define2(function() {
          return impl;
        });
      } else {
        this.tychei = impl;
      }
    })(
      exports,
      typeof module == "object" && module,
      // present in node.js
      typeof define == "function" && define
      // present with an AMD loader
    );
  }
});

// node_modules/@teachablemachine/image/node_modules/seedrandom/seedrandom.js
var require_seedrandom = __commonJS({
  "node_modules/@teachablemachine/image/node_modules/seedrandom/seedrandom.js"(exports, module) {
    (function(pool, math) {
      var global = (0, eval)("this"), width = 256, chunks = 6, digits = 52, rngname = "random", startdenom = math.pow(width, chunks), significance = math.pow(2, digits), overflow = significance * 2, mask = width - 1, nodecrypto;
      function seedrandom(seed, options, callback) {
        var key = [];
        options = options == true ? { entropy: true } : options || {};
        var shortseed = mixkey(flatten(
          options.entropy ? [seed, tostring(pool)] : seed == null ? autoseed() : seed,
          3
        ), key);
        var arc4 = new ARC4(key);
        var prng = function() {
          var n = arc4.g(chunks), d = startdenom, x = 0;
          while (n < significance) {
            n = (n + x) * width;
            d *= width;
            x = arc4.g(1);
          }
          while (n >= overflow) {
            n /= 2;
            d /= 2;
            x >>>= 1;
          }
          return (n + x) / d;
        };
        prng.int32 = function() {
          return arc4.g(4) | 0;
        };
        prng.quick = function() {
          return arc4.g(4) / 4294967296;
        };
        prng.double = prng;
        mixkey(tostring(arc4.S), pool);
        return (options.pass || callback || function(prng2, seed2, is_math_call, state) {
          if (state) {
            if (state.S) {
              copy(state, arc4);
            }
            prng2.state = function() {
              return copy(arc4, {});
            };
          }
          if (is_math_call) {
            math[rngname] = prng2;
            return seed2;
          } else return prng2;
        })(
          prng,
          shortseed,
          "global" in options ? options.global : this == math,
          options.state
        );
      }
      math["seed" + rngname] = seedrandom;
      function ARC4(key) {
        var t, keylen = key.length, me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];
        if (!keylen) {
          key = [keylen++];
        }
        while (i < width) {
          s[i] = i++;
        }
        for (i = 0; i < width; i++) {
          s[i] = s[j = mask & j + key[i % keylen] + (t = s[i])];
          s[j] = t;
        }
        (me.g = function(count) {
          var t2, r = 0, i2 = me.i, j2 = me.j, s2 = me.S;
          while (count--) {
            t2 = s2[i2 = mask & i2 + 1];
            r = r * width + s2[mask & (s2[i2] = s2[j2 = mask & j2 + t2]) + (s2[j2] = t2)];
          }
          me.i = i2;
          me.j = j2;
          return r;
        })(width);
      }
      function copy(f, t) {
        t.i = f.i;
        t.j = f.j;
        t.S = f.S.slice();
        return t;
      }
      ;
      function flatten(obj, depth) {
        var result = [], typ = typeof obj, prop;
        if (depth && typ == "object") {
          for (prop in obj) {
            try {
              result.push(flatten(obj[prop], depth - 1));
            } catch (e) {
            }
          }
        }
        return result.length ? result : typ == "string" ? obj : obj + "\0";
      }
      function mixkey(seed, key) {
        var stringseed = seed + "", smear, j = 0;
        while (j < stringseed.length) {
          key[mask & j] = mask & (smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++);
        }
        return tostring(key);
      }
      function autoseed() {
        try {
          var out;
          if (nodecrypto && (out = nodecrypto.randomBytes)) {
            out = out(width);
          } else {
            out = new Uint8Array(width);
            (global.crypto || global.msCrypto).getRandomValues(out);
          }
          return tostring(out);
        } catch (e) {
          var browser = global.navigator, plugins = browser && browser.plugins;
          return [+/* @__PURE__ */ new Date(), global, plugins, global.screen, tostring(pool)];
        }
      }
      function tostring(a) {
        return String.fromCharCode.apply(0, a);
      }
      mixkey(math.random(), pool);
      if (typeof module == "object" && module.exports) {
        module.exports = seedrandom;
        try {
          nodecrypto = require_crypto();
        } catch (ex) {
        }
      } else if (typeof define == "function" && define.amd) {
        define(function() {
          return seedrandom;
        });
      }
    })(
      [],
      // pool: entropy pool starts empty
      Math
      // math: package containing random, pow, and seedrandom
    );
  }
});

// node_modules/@teachablemachine/image/node_modules/seedrandom/index.js
var require_seedrandom2 = __commonJS({
  "node_modules/@teachablemachine/image/node_modules/seedrandom/index.js"(exports, module) {
    var alea = require_alea();
    var xor128 = require_xor128();
    var xorwow = require_xorwow();
    var xorshift7 = require_xorshift7();
    var xor4096 = require_xor4096();
    var tychei = require_tychei();
    var sr = require_seedrandom();
    sr.alea = alea;
    sr.xor128 = xor128;
    sr.xorwow = xorwow;
    sr.xorshift7 = xorshift7;
    sr.xor4096 = xor4096;
    sr.tychei = tychei;
    module.exports = sr;
  }
});

// node_modules/@teachablemachine/image/dist/teachable-mobilenet.js
var require_teachable_mobilenet = __commonJS({
  "node_modules/@teachablemachine/image/dist/teachable-mobilenet.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1) throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;
            case 4:
              _.label++;
              return { value: op[1], done: false };
            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;
            case 7:
              op = _.ops.pop();
              _.trys.pop();
              continue;
            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }
              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }
              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }
              if (t && _.label < t[2]) {
                _.label = t[2];
                _.ops.push(op);
                break;
              }
              if (t[2]) _.ops.pop();
              _.trys.pop();
              continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createTeachable = exports.TeachableMobileNet = void 0;
    var tf = (init_dist(), __toCommonJS(dist_exports));
    var tfjs_1 = (init_dist(), __toCommonJS(dist_exports));
    var tf_1 = require_tf();
    var custom_mobilenet_1 = require_custom_mobilenet();
    var seedrandom = require_seedrandom2();
    var VALIDATION_FRACTION = 0.15;
    var isTensor = function(c) {
      return typeof c.dataId === "object" && typeof c.shape === "object";
    };
    function flatOneHot(label, numClasses) {
      var labelOneHot = new Array(numClasses).fill(0);
      labelOneHot[label] = 1;
      return labelOneHot;
    }
    function fisherYates(array, seed) {
      var _a;
      var length = array.length;
      var shuffled = array.slice();
      for (var i = length - 1; i > 0; i -= 1) {
        var randomIndex = void 0;
        if (seed) {
          randomIndex = Math.floor(seed() * (i + 1));
        } else {
          randomIndex = Math.floor(Math.random() * (i + 1));
        }
        _a = [shuffled[randomIndex], shuffled[i]], shuffled[i] = _a[0], shuffled[randomIndex] = _a[1];
      }
      return shuffled;
    }
    var TeachableMobileNet = (
      /** @class */
      function(_super) {
        __extends(TeachableMobileNet2, _super);
        function TeachableMobileNet2(truncated, metadata) {
          var _this = _super.call(this, tf.sequential(), metadata) || this;
          _this.totalSamples = 0;
          _this.examples = [];
          _this.truncatedModel = truncated;
          return _this;
        }
        Object.defineProperty(TeachableMobileNet2.prototype, "asSequentialModel", {
          get: function() {
            return this.model;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(TeachableMobileNet2.prototype, "isTrained", {
          /**
           * has the teachable model been trained?
           */
          get: function() {
            return !!this.model && this.model.layers && this.model.layers.length > 2;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(TeachableMobileNet2.prototype, "isPrepared", {
          /**
           * has the dataset been prepared with all labels and samples processed?
           */
          get: function() {
            return !!this.trainDataset;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(TeachableMobileNet2.prototype, "numClasses", {
          /**
           * how many classes are in the dataset?
           */
          get: function() {
            return this._metadata.labels.length;
          },
          enumerable: false,
          configurable: true
        });
        TeachableMobileNet2.prototype.addExample = function(className, sample) {
          return __awaiter(this, void 0, void 0, function() {
            var cap, example, activation;
            return __generator(this, function(_a) {
              cap = isTensor(sample) ? sample : tf_1.capture(sample, this._metadata.grayscale);
              example = this.truncatedModel.predict(cap);
              activation = example.dataSync();
              cap.dispose();
              example.dispose();
              this.examples[className].push(activation);
              this.totalSamples++;
              return [
                2
                /*return*/
              ];
            });
          });
        };
        TeachableMobileNet2.prototype.predict = function(image, flipped) {
          if (flipped === void 0) {
            flipped = false;
          }
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
              if (!this.model) {
                throw new Error("Model has not been trained yet, called train() first");
              }
              return [2, _super.prototype.predict.call(this, image, flipped)];
            });
          });
        };
        TeachableMobileNet2.prototype.predictTopK = function(image, maxPredictions, flipped) {
          if (maxPredictions === void 0) {
            maxPredictions = 10;
          }
          if (flipped === void 0) {
            flipped = false;
          }
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
              if (!this.model) {
                throw new Error("Model has not been trained yet, called train() first");
              }
              return [2, _super.prototype.predictTopK.call(this, image, maxPredictions, flipped)];
            });
          });
        };
        TeachableMobileNet2.prototype.prepare = function() {
          for (var classes in this.examples) {
            if (classes.length === 0) {
              throw new Error("Add some examples before training");
            }
          }
          var datasets = this.convertToTfDataset();
          this.trainDataset = datasets.trainDataset;
          this.validationDataset = datasets.validationDataset;
        };
        TeachableMobileNet2.prototype.convertToTfDataset = function() {
          for (var i = 0; i < this.examples.length; i++) {
            this.examples[i] = fisherYates(this.examples[i], this.seed);
          }
          var trainDataset = [];
          var validationDataset = [];
          var _loop_1 = function(i2) {
            var y = flatOneHot(i2, this_1.numClasses);
            var classLength = this_1.examples[i2].length;
            var numValidation = Math.ceil(VALIDATION_FRACTION * classLength);
            var numTrain = classLength - numValidation;
            var classTrain = this_1.examples[i2].slice(0, numTrain).map(function(dataArray) {
              return { data: dataArray, label: y };
            });
            var classValidation = this_1.examples[i2].slice(numTrain).map(function(dataArray) {
              return { data: dataArray, label: y };
            });
            trainDataset = trainDataset.concat(classTrain);
            validationDataset = validationDataset.concat(classValidation);
          };
          var this_1 = this;
          for (var i = 0; i < this.examples.length; i++) {
            _loop_1(i);
          }
          trainDataset = fisherYates(trainDataset, this.seed);
          validationDataset = fisherYates(validationDataset, this.seed);
          var trainX = tf.data.array(trainDataset.map(function(sample) {
            return sample.data;
          }));
          var validationX = tf.data.array(validationDataset.map(function(sample) {
            return sample.data;
          }));
          var trainY = tf.data.array(trainDataset.map(function(sample) {
            return sample.label;
          }));
          var validationY = tf.data.array(validationDataset.map(function(sample) {
            return sample.label;
          }));
          return {
            trainDataset: tf.data.zip({ xs: trainX, ys: trainY }),
            validationDataset: tf.data.zip({ xs: validationX, ys: validationY })
          };
        };
        TeachableMobileNet2.prototype.save = function(handlerOrURL, config) {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
              return [2, this.model.save(handlerOrURL, config)];
            });
          });
        };
        TeachableMobileNet2.prototype.train = function(params, callbacks) {
          if (callbacks === void 0) {
            callbacks = {};
          }
          return __awaiter(this, void 0, void 0, function() {
            var originalOnTrainEnd, numLabels, inputShape, inputSize, varianceScaling, optimizer, trainData, validationData, history, jointModel;
            var _this = this;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  originalOnTrainEnd = callbacks.onTrainEnd || function() {
                  };
                  callbacks.onTrainEnd = function(logs) {
                    if (_this.__stopTrainingResolve) {
                      _this.__stopTrainingResolve();
                      _this.__stopTrainingResolve = null;
                    }
                    originalOnTrainEnd(logs);
                  };
                  if (!this.isPrepared) {
                    this.prepare();
                  }
                  numLabels = this.getLabels().length;
                  tfjs_1.util.assert(numLabels === this.numClasses, function() {
                    return "Can not train, has " + numLabels + " labels and " + _this.numClasses + " classes";
                  });
                  inputShape = this.truncatedModel.outputs[0].shape.slice(1);
                  inputSize = tf.util.sizeFromShape(inputShape);
                  if (this.seed) {
                    varianceScaling = tf.initializers.varianceScaling({ seed: 3.14 });
                  } else {
                    varianceScaling = tf.initializers.varianceScaling({});
                  }
                  this.trainingModel = tf.sequential({
                    layers: [
                      tf.layers.dense({
                        inputShape: [inputSize],
                        units: params.denseUnits,
                        activation: "relu",
                        kernelInitializer: varianceScaling,
                        useBias: true
                      }),
                      tf.layers.dense({
                        kernelInitializer: varianceScaling,
                        useBias: false,
                        activation: "softmax",
                        units: this.numClasses
                      })
                    ]
                  });
                  optimizer = tf.train.adam(params.learningRate);
                  this.trainingModel.compile({
                    optimizer,
                    // loss: 'binaryCrossentropy',
                    loss: "categoricalCrossentropy",
                    metrics: ["accuracy"]
                  });
                  if (!(params.batchSize > 0)) {
                    throw new Error("Batch size is 0 or NaN. Please choose a non-zero fraction");
                  }
                  trainData = this.trainDataset.batch(params.batchSize);
                  validationData = this.validationDataset.batch(params.batchSize);
                  return [4, this.trainingModel.fitDataset(trainData, {
                    epochs: params.epochs,
                    validationData,
                    callbacks
                  })];
                case 1:
                  history = _a.sent();
                  jointModel = tf.sequential();
                  jointModel.add(this.truncatedModel);
                  jointModel.add(this.trainingModel);
                  this.model = jointModel;
                  optimizer.dispose();
                  return [2, this.model];
              }
            });
          });
        };
        TeachableMobileNet2.prototype.prepareDataset = function() {
          for (var i = 0; i < this.numClasses; i++) {
            this.examples[i] = [];
          }
        };
        TeachableMobileNet2.prototype.setLabel = function(index, label) {
          this._metadata.labels[index] = label;
        };
        TeachableMobileNet2.prototype.setLabels = function(labels) {
          this._metadata.labels = labels;
          this.prepareDataset();
        };
        TeachableMobileNet2.prototype.getLabel = function(index) {
          return this._metadata.labels[index];
        };
        TeachableMobileNet2.prototype.getLabels = function() {
          return this._metadata.labels;
        };
        TeachableMobileNet2.prototype.setName = function(name) {
          this._metadata.modelName = name;
        };
        TeachableMobileNet2.prototype.getName = function() {
          return this._metadata.modelName;
        };
        TeachableMobileNet2.prototype.stopTraining = function() {
          var _this = this;
          var promise = new Promise(function(resolve, reject) {
            _this.trainingModel.stopTraining = true;
            _this.__stopTrainingResolve = resolve;
          });
          return promise;
        };
        TeachableMobileNet2.prototype.dispose = function() {
          this.trainingModel.dispose();
          _super.prototype.dispose.call(this);
        };
        TeachableMobileNet2.prototype.calculateAccuracyPerClass = function() {
          return __awaiter(this, void 0, void 0, function() {
            var validationXs, validationYs, batchSize, iterations, batchesX, batchesY, itX, itY, allX, allY, i, batchedXTensor, batchedXPredictionTensor, argMaxX, batchedYTensor, argMaxY, reference, predictions, i;
            var _this = this;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  validationXs = this.validationDataset.mapAsync(function(dataset) {
                    return __awaiter(_this, void 0, void 0, function() {
                      return __generator(this, function(_a2) {
                        return [2, dataset.xs];
                      });
                    });
                  });
                  validationYs = this.validationDataset.mapAsync(function(dataset) {
                    return __awaiter(_this, void 0, void 0, function() {
                      return __generator(this, function(_a2) {
                        return [2, dataset.ys];
                      });
                    });
                  });
                  batchSize = Math.min(validationYs.size, 32);
                  iterations = Math.ceil(validationYs.size / batchSize);
                  batchesX = validationXs.batch(batchSize);
                  batchesY = validationYs.batch(batchSize);
                  return [4, batchesX.iterator()];
                case 1:
                  itX = _a.sent();
                  return [4, batchesY.iterator()];
                case 2:
                  itY = _a.sent();
                  allX = [];
                  allY = [];
                  i = 0;
                  _a.label = 3;
                case 3:
                  if (!(i < iterations)) return [3, 7];
                  return [4, itX.next()];
                case 4:
                  batchedXTensor = _a.sent();
                  batchedXPredictionTensor = this.trainingModel.predict(batchedXTensor.value);
                  argMaxX = batchedXPredictionTensor.argMax(1);
                  allX.push(argMaxX);
                  return [4, itY.next()];
                case 5:
                  batchedYTensor = _a.sent();
                  argMaxY = batchedYTensor.value.argMax(1);
                  allY.push(argMaxY);
                  batchedXTensor.value.dispose();
                  batchedXPredictionTensor.dispose();
                  batchedYTensor.value.dispose();
                  _a.label = 6;
                case 6:
                  i++;
                  return [3, 3];
                case 7:
                  reference = tf.concat(allY);
                  predictions = tf.concat(allX);
                  if (iterations !== 1) {
                    for (i = 0; i < allX.length; i++) {
                      allX[i].dispose();
                      allY[i].dispose();
                    }
                  }
                  return [2, { reference, predictions }];
              }
            });
          });
        };
        TeachableMobileNet2.prototype.setSeed = function(seed) {
          this.seed = seedrandom(seed);
        };
        return TeachableMobileNet2;
      }(custom_mobilenet_1.CustomMobileNet)
    );
    exports.TeachableMobileNet = TeachableMobileNet;
    function createTeachable(metadata, modelOptions) {
      return __awaiter(this, void 0, void 0, function() {
        var mobilenet;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, custom_mobilenet_1.loadTruncatedMobileNet(modelOptions)];
            case 1:
              mobilenet = _a.sent();
              return [2, new TeachableMobileNet(mobilenet, metadata)];
          }
        });
      });
    }
    exports.createTeachable = createTeachable;
  }
});

// node_modules/autobind-decorator/lib/esm/index.js
var esm_exports = {};
__export(esm_exports, {
  boundClass: () => boundClass,
  boundMethod: () => boundMethod,
  default: () => autobind
});
function _typeof(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof2(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof = function _typeof2(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof(obj);
}
function boundMethod(target, key, descriptor) {
  var fn = descriptor.value;
  if (typeof fn !== "function") {
    throw new TypeError("@boundMethod decorator can only be applied to methods not: ".concat(_typeof(fn)));
  }
  var definingProperty = false;
  return {
    configurable: true,
    get: function get() {
      if (definingProperty || this === target.prototype || this.hasOwnProperty(key) || typeof fn !== "function") {
        return fn;
      }
      var boundFn = fn.bind(this);
      definingProperty = true;
      Object.defineProperty(this, key, {
        configurable: true,
        get: function get2() {
          return boundFn;
        },
        set: function set(value) {
          fn = value;
          delete this[key];
        }
      });
      definingProperty = false;
      return boundFn;
    },
    set: function set(value) {
      fn = value;
    }
  };
}
function boundClass(target) {
  var keys;
  if (typeof Reflect !== "undefined" && typeof Reflect.ownKeys === "function") {
    keys = Reflect.ownKeys(target.prototype);
  } else {
    keys = Object.getOwnPropertyNames(target.prototype);
    if (typeof Object.getOwnPropertySymbols === "function") {
      keys = keys.concat(Object.getOwnPropertySymbols(target.prototype));
    }
  }
  keys.forEach(function(key) {
    if (key === "constructor") {
      return;
    }
    var descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);
    if (typeof descriptor.value === "function") {
      Object.defineProperty(target.prototype, key, boundMethod(target, key, descriptor));
    }
  });
  return target;
}
function autobind() {
  if (arguments.length === 1) {
    return boundClass.apply(void 0, arguments);
  }
  return boundMethod.apply(void 0, arguments);
}
var init_esm = __esm({
  "node_modules/autobind-decorator/lib/esm/index.js"() {
  }
});

// node_modules/@teachablemachine/image/dist/utils/webcam.js
var require_webcam = __commonJS({
  "node_modules/@teachablemachine/image/dist/utils/webcam.js"(exports) {
    "use strict";
    var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
      else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1) throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;
            case 4:
              _.label++;
              return { value: op[1], done: false };
            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;
            case 7:
              op = _.ops.pop();
              _.trys.pop();
              continue;
            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }
              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }
              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }
              if (t && _.label < t[2]) {
                _.label = t[2];
                _.ops.push(op);
                break;
              }
              if (t[2]) _.ops.pop();
              _.trys.pop();
              continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Webcam = void 0;
    var autobind_decorator_1 = (init_esm(), __toCommonJS(esm_exports));
    var canvas_1 = require_canvas();
    var defaultVideoOptions = {
      facingMode: "user",
      frameRate: 24
    };
    var fillConstraints = function(options) {
      options.facingMode = options.facingMode || defaultVideoOptions.facingMode;
      options.frameRate = options.frameRate || defaultVideoOptions.frameRate;
      options.aspectRatio = options.aspectRatio || defaultVideoOptions.aspectRatio;
      return options;
    };
    var Webcam = (
      /** @class */
      function() {
        function Webcam2(width, height, flip) {
          if (width === void 0) {
            width = 400;
          }
          if (height === void 0) {
            height = 400;
          }
          if (flip === void 0) {
            flip = false;
          }
          this.width = width;
          this.height = height;
          this.flip = flip;
        }
        Webcam2.prototype.getWebcam = function(options) {
          if (options === void 0) {
            options = {};
          }
          if (!window.navigator.mediaDevices || !window.navigator.mediaDevices.getUserMedia) {
            return Promise.reject("Your browser does not support WebRTC. Please try another one.");
          }
          options.width = 640;
          var videoOptions = fillConstraints(options);
          var video = document.createElement("video");
          return window.navigator.mediaDevices.getUserMedia({ video: videoOptions }).then(function(mediaStream) {
            video.srcObject = mediaStream;
            video.addEventListener("loadedmetadata", function(event) {
              var vw = video.videoWidth, vh = video.videoHeight;
              video.width = vw;
              video.height = vh;
            });
            return video;
          }, function() {
            return Promise.reject("Could not open your camera. You may have denied access.");
          });
        };
        Webcam2.prototype.setup = function(options) {
          if (options === void 0) {
            options = {};
          }
          return __awaiter(this, void 0, void 0, function() {
            var _a;
            return __generator(this, function(_b) {
              switch (_b.label) {
                case 0:
                  if (!!this.webcam) return [3, 2];
                  _a = this;
                  return [4, this.getWebcam(options)];
                case 1:
                  _a.webcam = _b.sent();
                  if (!this.canvas) {
                    this.canvas = document.createElement("canvas");
                    this.canvas.width = this.width;
                    this.canvas.height = this.height;
                  }
                  _b.label = 2;
                case 2:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        Webcam2.prototype.play = function() {
          var promise = this.webcam.play();
          return promise;
        };
        Webcam2.prototype.pause = function() {
          this.webcam.pause();
        };
        Webcam2.prototype.stop = function() {
          this.stopStreamedVideo(this.webcam);
        };
        Webcam2.prototype.update = function() {
          this.renderCameraToCanvas();
        };
        Webcam2.prototype.stopStreamedVideo = function(videoEl) {
          var stream = videoEl.srcObject;
          var tracks = stream.getTracks();
          tracks.forEach(function(track) {
            track.stop();
          });
          videoEl.srcObject = null;
        };
        Webcam2.prototype.renderCameraToCanvas = function() {
          if (this.canvas && this.webcam) {
            var ctx = this.canvas.getContext("2d");
            if (this.webcam.videoWidth !== 0) {
              var croppedCanvas = canvas_1.cropTo(this.webcam, this.width, this.flip);
              ctx.drawImage(croppedCanvas, 0, 0);
            }
          }
        };
        __decorate([
          autobind_decorator_1.default
        ], Webcam2.prototype, "getWebcam", null);
        __decorate([
          autobind_decorator_1.default
        ], Webcam2.prototype, "setup", null);
        __decorate([
          autobind_decorator_1.default
        ], Webcam2.prototype, "play", null);
        __decorate([
          autobind_decorator_1.default
        ], Webcam2.prototype, "pause", null);
        __decorate([
          autobind_decorator_1.default
        ], Webcam2.prototype, "stop", null);
        __decorate([
          autobind_decorator_1.default
        ], Webcam2.prototype, "update", null);
        __decorate([
          autobind_decorator_1.default
        ], Webcam2.prototype, "stopStreamedVideo", null);
        __decorate([
          autobind_decorator_1.default
        ], Webcam2.prototype, "renderCameraToCanvas", null);
        return Webcam2;
      }()
    );
    exports.Webcam = Webcam;
  }
});

// node_modules/@teachablemachine/image/dist/index.js
var require_dist = __commonJS({
  "node_modules/@teachablemachine/image/dist/index.js"(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    var custom_mobilenet_1 = require_custom_mobilenet();
    Object.defineProperty(exports, "IMAGE_SIZE", { enumerable: true, get: function() {
      return custom_mobilenet_1.IMAGE_SIZE;
    } });
    Object.defineProperty(exports, "CustomMobileNet", { enumerable: true, get: function() {
      return custom_mobilenet_1.CustomMobileNet;
    } });
    Object.defineProperty(exports, "load", { enumerable: true, get: function() {
      return custom_mobilenet_1.load;
    } });
    Object.defineProperty(exports, "loadFromFiles", { enumerable: true, get: function() {
      return custom_mobilenet_1.loadFromFiles;
    } });
    Object.defineProperty(exports, "loadTruncatedMobileNet", { enumerable: true, get: function() {
      return custom_mobilenet_1.loadTruncatedMobileNet;
    } });
    var teachable_mobilenet_1 = require_teachable_mobilenet();
    Object.defineProperty(exports, "TeachableMobileNet", { enumerable: true, get: function() {
      return teachable_mobilenet_1.TeachableMobileNet;
    } });
    Object.defineProperty(exports, "createTeachable", { enumerable: true, get: function() {
      return teachable_mobilenet_1.createTeachable;
    } });
    var webcam_1 = require_webcam();
    Object.defineProperty(exports, "Webcam", { enumerable: true, get: function() {
      return webcam_1.Webcam;
    } });
    var version_1 = require_version();
    Object.defineProperty(exports, "version", { enumerable: true, get: function() {
      return version_1.version;
    } });
  }
});
export default require_dist();
/*! Bundled license information:

@teachablemachine/image/dist/utils/tf.js:
  (**
   * @license
   * Copyright 2019 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   *)

@teachablemachine/image/dist/utils/canvas.js:
  (**
   * @license
   * Copyright 2019 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   *)

@teachablemachine/image/dist/version.js:
  (** @license See the LICENSE file. *)

@teachablemachine/image/dist/custom-mobilenet.js:
  (**
   * @license
   * Copyright 2019 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   *)

@teachablemachine/image/dist/teachable-mobilenet.js:
  (**
   * @license
   * Copyright 2019 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   *)

@teachablemachine/image/dist/utils/webcam.js:
  (**
   * @license
   * Copyright 2019 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   *)

@teachablemachine/image/dist/index.js:
  (**
   * @license
   * Copyright 2019 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   *)
*/
//# sourceMappingURL=@teachablemachine_image.js.map
