{
  "version": 3,
  "sources": ["../../@teachablemachine/image/src/utils/tf.ts", "../../@teachablemachine/image/src/utils/canvas.ts", "../../@teachablemachine/image/src/version.ts", "../../@teachablemachine/image/src/custom-mobilenet.ts", "../../seedrandom/lib/alea.js", "../../seedrandom/lib/xor128.js", "../../seedrandom/lib/xorwow.js", "../../seedrandom/lib/xorshift7.js", "../../seedrandom/lib/xor4096.js", "../../seedrandom/lib/tychei.js", "../../seedrandom/seedrandom.js", "../../seedrandom/index.js", "../../@teachablemachine/image/src/teachable-mobilenet.ts", "../../autobind-decorator/lib/esm/index.js", "../../@teachablemachine/image/src/utils/webcam.ts", "../../@teachablemachine/image/src/index.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '@tensorflow/tfjs';\n\n/**\n * Receives an image and normalizes it between -1 and 1.\n * Returns a batched image (1 - element batch) of shape [1, w, h, c]\n * @param rasterElement the element with pixels to convert to a Tensor\n * @param grayscale optinal flag that changes the crop to [1, w, h, 1]\n */\nexport function capture(rasterElement: HTMLImageElement | HTMLVideoElement | HTMLCanvasElement, grayscale?: boolean) {\n    return tf.tidy(() => {\n        const pixels = tf.browser.fromPixels(rasterElement);\n\n        // crop the image so we're using the center square\n        const cropped = cropTensor(pixels, grayscale);\n\n        // Expand the outer most dimension so we have a batch size of 1\n        const batchedImage = cropped.expandDims(0);\n\n        // Normalize the image between -1 and a1. The image comes in between 0-255\n        // so we divide by 127 and subtract 1.\n        return batchedImage.toFloat().div(tf.scalar(127)).sub(tf.scalar(1));\n    });\n}\n\n\nexport function cropTensor( img: tf.Tensor3D, grayscaleModel?: boolean, grayscaleInput?: boolean ) : tf.Tensor3D {\n    const size = Math.min(img.shape[0], img.shape[1]);\n    const centerHeight = img.shape[0] / 2;\n    const beginHeight = centerHeight - (size / 2);\n    const centerWidth = img.shape[1] / 2;\n    const beginWidth = centerWidth - (size / 2);\n    \n    if (grayscaleModel && !grayscaleInput) {\n        //cropped rgb data\n        let grayscale_cropped = img.slice([beginHeight, beginWidth, 0], [size, size, 3]);\n        \n        grayscale_cropped = grayscale_cropped.reshape([size * size, 1, 3])\n        const rgb_weights = [0.2989, 0.5870, 0.1140]\n        grayscale_cropped = tf.mul(grayscale_cropped, rgb_weights)\n        grayscale_cropped = grayscale_cropped.reshape([size, size, 3]);\n    \n        grayscale_cropped = tf.sum(grayscale_cropped, -1)\n        grayscale_cropped = tf.expandDims(grayscale_cropped, -1)\n\n        return grayscale_cropped;\n    }\n    return img.slice([beginHeight, beginWidth, 0], [size, size, 3]);\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\ntype Drawable = HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | ImageBitmap;\n\nconst newCanvas = () => document.createElement('canvas');\n\nexport function resize(image: Drawable, scale: number, canvas: HTMLCanvasElement= newCanvas()) {\n    canvas.width = image.width * scale;\n    canvas.height = image.height * scale;\n    const ctx: CanvasRenderingContext2D = canvas.getContext('2d')!;\n\n    ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n    return canvas;\n}\n\nexport function resizeMaxTo(image: Drawable, maxSize: number, canvas: HTMLCanvasElement= newCanvas()) {\n    const max = Math.max(image.width, image.height);\n    return resize(image, maxSize / max, canvas);\n}\n\nexport function resizeMinTo(image: Drawable, minSize: number, canvas: HTMLCanvasElement= newCanvas()) {\n    const min = Math.min(image.width, image.height);\n    return resize(image, minSize / min, canvas);\n}\n\n\nexport function cropTo( image: Drawable, size: number,\n    flipped = false, canvas: HTMLCanvasElement = newCanvas()) {\n\n    // image image, bitmap, or canvas\n    let width = image.width;\n    let height = image.height;\n\n    // if video element\n    if (image instanceof HTMLVideoElement) {\n        width = (image as HTMLVideoElement).videoWidth;\n        height = (image as HTMLVideoElement).videoHeight;\n    }\n\n    const min = Math.min(width, height);\n    const scale = size / min;\n    const scaledW = Math.ceil(width * scale);\n    const scaledH = Math.ceil(height * scale);\n    const dx = scaledW - size;\n    const dy = scaledH - size;\n    canvas.width = canvas.height = size;\n    const ctx: CanvasRenderingContext2D = canvas.getContext('2d');\n    ctx.drawImage(image, ~~(dx / 2) * -1, ~~(dy / 2) * -1, scaledW, scaledH);\n\n    // canvas is already sized and cropped to center correctly\n    if (flipped) {\n        ctx.scale(-1, 1);\n        ctx.drawImage(canvas, size * -1, 0);\n    }\n\n    return canvas;\n}\n", "/** @license See the LICENSE file. */\n\n// This code is auto-generated, do not modify this file!\nconst version = '0.8.4-alpha2';\nexport { version };\n\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '@tensorflow/tfjs';\nimport { util, SymbolicTensor } from '@tensorflow/tfjs';\nimport { dispose } from '@tensorflow/tfjs';\nimport { capture } from './utils/tf';\nimport { cropTo } from './utils/canvas';\nimport { version } from './version';\n\nconst DEFAULT_MOBILENET_VERSION = 1;\nconst DEFAULT_TRAINING_LAYER_V1 = 'conv_pw_13_relu';\nconst DEFAULT_TRAINING_LAYER_V2 = \"out_relu\"; \nconst DEFAULT_ALPHA_V1 = 0.25;\nconst DEFAULT_ALPHA_V2 = 0.35;\nexport const IMAGE_SIZE = 224;\n\n/**\n * the metadata to describe the model's creation,\n * includes the labels associated with the classes\n * and versioning information from training.\n */\nexport interface Metadata {\n    tfjsVersion: string;\n    tmVersion?: string;\n    packageVersion: string;\n    packageName: string;\n    modelName?: string;\n    timeStamp?: string;\n    labels: string[];\n    userMetadata?: {};\n    grayscale?: boolean;\n    imageSize?: number;\n}\n\nexport interface ModelOptions {\n    version?: number;\n    checkpointUrl?: string;\n    alpha?: number;\n    trainingLayer?: string;\n}\n\n/**\n * Receives a Metadata object and fills in the optional fields such as timeStamp\n * @param data a Metadata object\n */\nconst fillMetadata = (data: Partial<Metadata>) => {\n    // util.assert(typeof data.tfjsVersion === 'string', () => `metadata.tfjsVersion is invalid`);\n    data.packageVersion = data.packageVersion || version;\n    data.packageName = data.packageName || '@teachablemachine/image';\n    data.timeStamp = data.timeStamp || new Date().toISOString();\n    data.userMetadata = data.userMetadata || {};\n    data.modelName = data.modelName || 'untitled';\n    data.labels = data.labels || [];\n    data.imageSize = data.imageSize || IMAGE_SIZE;\n    return data as Metadata;\n};\n\n// tslint:disable-next-line:no-any\nconst isMetadata = (c: any): c is Metadata =>\n    !!c && Array.isArray(c.labels);\n\nconst isAlphaValid = (version: number, alpha: number) => {\n    if (version === 1) {\n        if (alpha !== 0.25 && alpha !== 0.5 && alpha !== 0.75 && alpha !== 1) {\n            console.warn(\"Invalid alpha. Options are: 0.25, 0.50, 0.75 or 1.00.\");\n            console.log(\"Loading model with alpha: \", DEFAULT_ALPHA_V1.toFixed(2)); \n            return DEFAULT_ALPHA_V1;\n        }\n    }\n    else {\n        if (alpha !== 0.35 && alpha !== 0.5 && alpha !== 0.75 && alpha !== 1) {\n            console.warn(\"Invalid alpha. Options are: 0.35, 0.50, 0.75 or 1.00.\");\n            console.log(\"Loading model with alpha: \", DEFAULT_ALPHA_V2.toFixed(2)); \n            return DEFAULT_ALPHA_V2;\n        }\n    }\n\n    return alpha;\n};\n\nconst parseModelOptions = (options?: ModelOptions) => {\n    options = options || {}\n\n    if (options.checkpointUrl && options.trainingLayer) {\n        if (options.alpha || options.version){\n            console.warn(\"Checkpoint URL passed to modelOptions, alpha options are ignored\");\n        }        \n        return [options.checkpointUrl, options.trainingLayer];\n    } else {\n        options.version = options.version || DEFAULT_MOBILENET_VERSION;\n        \n        if(options.version === 1){\n            options.alpha = options.alpha || DEFAULT_ALPHA_V1;  \n            options.alpha = isAlphaValid(options.version, options.alpha);\n\n            console.log(`Loading mobilenet ${options.version} and alpha ${options.alpha}`);\n            // exception is alpha of 1 can only be 1.0\n            let alphaString = options.alpha.toFixed(2);\n            if (alphaString === \"1.00\") { alphaString = \"1.0\"; }\n\n            return [\n                // tslint:disable-next-line:max-line-length        \n                `https://storage.googleapis.com/tfjs-models/tfjs/mobilenet_v1_${alphaString}_${IMAGE_SIZE}/model.json`,\n                DEFAULT_TRAINING_LAYER_V1\n            ];\n        }\n        else if (options.version === 2){\n            options.alpha = options.alpha || DEFAULT_ALPHA_V2;  \n            options.alpha = isAlphaValid(options.version, options.alpha);\n\n            console.log(`Loading mobilenet ${options.version} and alpha ${options.alpha}`);\n            return [\n                // tslint:disable-next-line:max-line-length        \n                `https://storage.googleapis.com/teachable-machine-models/mobilenet_v2_weights_tf_dim_ordering_tf_kernels_${options.alpha.toFixed(2)}_${IMAGE_SIZE}_no_top/model.json`,\n                DEFAULT_TRAINING_LAYER_V2\n            ];\n        } else {\n            throw new Error(`MobileNet V${options.version} doesn't exist`);\n        }   \n    }\n};\n\n/**\n * process either a URL string or a Metadata object\n * @param metadata a url to load metadata or a Metadata object\n */\nconst processMetadata = async (metadata: string | Metadata) => {\n    let metadataJSON: Metadata;\n    if (typeof metadata === 'string') {\n        const metadataResponse = await fetch(metadata);\n        metadataJSON = await metadataResponse.json();\n    } else if (isMetadata(metadata)) {\n        metadataJSON = metadata;\n    } else {\n        throw new Error('Invalid Metadata provided');\n    }\n    return fillMetadata(metadataJSON);\n};\n\nexport type ClassifierInputSource = HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | ImageBitmap;\n\n\n/**\n * Computes the probabilities of the topK classes given logits by computing\n * softmax to get probabilities and then sorting the probabilities.\n * @param logits Tensor representing the logits from MobileNet.\n * @param topK The number of top predictions to show.\n */\nexport async function getTopKClasses(labels: string[], logits: tf.Tensor<tf.Rank>, topK = 3) {\n  const values = await logits.data();\n  return tf.tidy(() => {\n      topK = Math.min(topK, values.length);\n\n      const valuesAndIndices = [];\n      for (let i = 0; i < values.length; i++) {\n          valuesAndIndices.push({value: values[i], index: i});\n      }\n      valuesAndIndices.sort((a, b) => {\n          return b.value - a.value;\n      });\n      const topkValues = new Float32Array(topK);\n      const topkIndices = new Int32Array(topK);\n      for (let i = 0; i < topK; i++) {\n          topkValues[i] = valuesAndIndices[i].value;\n          topkIndices[i] = valuesAndIndices[i].index;\n      }\n\n      const topClassesAndProbs = [];\n      for (let i = 0; i < topkIndices.length; i++) {\n          topClassesAndProbs.push({\n              className: labels[topkIndices[i]], //IMAGENET_CLASSES[topkIndices[i]],\n              probability: topkValues[i]\n          });\n      }\n      return topClassesAndProbs;\n  });\n}\n\n\nexport class CustomMobileNet {\n    /**\n     * the truncated mobilenet model we will train on top of\n     */\n    protected truncatedModel: tf.LayersModel;\n\n    static get EXPECTED_IMAGE_SIZE() {\n        return IMAGE_SIZE;\n    }\n\n    protected _metadata: Metadata;\n    public getMetadata() {\n        return this._metadata;\n    }\n\n    constructor(public model: tf.LayersModel, metadata: Partial<Metadata>) {\n        this._metadata = fillMetadata(metadata);\n    }\n\n    /**\n     * get the total number of classes existing within model\n     */\n    getTotalClasses() {\n        const output = this.model.output as SymbolicTensor;\n        const totalClasses = output.shape[1];\n        return totalClasses;\n    }\n\n    /**\n     * get the model labels\n     */\n    getClassLabels() {\n        return this._metadata.labels;\n    }\n\n    /**\n     * Given an image element, makes a prediction through mobilenet returning the\n     * probabilities of the top K classes.\n     * @param image the image to classify\n     * @param maxPredictions the maximum number of classification predictions\n     */\n    async predictTopK(image: ClassifierInputSource, maxPredictions = 10, flipped = false) {\n        const croppedImage = cropTo(image, this._metadata.imageSize, flipped);\n\n        const logits = tf.tidy(() => {\n            const captured = capture(croppedImage, this._metadata.grayscale);\n            return this.model.predict(captured);\n        });\n\n        // Convert logits to probabilities and class names.\n        const classes = await getTopKClasses(this._metadata.labels, logits as tf.Tensor<tf.Rank>, maxPredictions);\n        dispose(logits);\n\n        return classes;\n    }\n\n    /**\n     * Given an image element, makes a prediction through mobilenet returning the\n     * probabilities for ALL classes.\n     * @param image the image to classify\n     * @param flipped whether to flip the image on X\n     */\n    async predict(image: ClassifierInputSource, flipped = false) {\n        const croppedImage = cropTo(image, this._metadata.imageSize, flipped);\n\n        const logits = tf.tidy(() => {\n            const captured = capture(croppedImage, this._metadata.grayscale);\n            return this.model.predict(captured);\n        });\n\n        const values = await (logits as tf.Tensor<tf.Rank>).data();\n\n        const classes = [];\n        for (let i = 0; i < values.length; i++) {\n            classes.push({\n                className: this._metadata.labels[i],\n                probability: values[i]\n            });\n        }\n\n        dispose(logits);\n\n        return classes;\n    }\n\n    public dispose() {\n        this.truncatedModel.dispose();\n    }\n}\n\n/**\n * load the base mobilenet model\n * @param modelOptions options determining what model to load\n */\nexport async function loadTruncatedMobileNet(modelOptions?: ModelOptions) {\n    const [checkpointUrl, trainingLayer] = parseModelOptions(modelOptions);\n    const mobilenet = await tf.loadLayersModel(checkpointUrl);\n\n    if (modelOptions && modelOptions.version === 1){\n        const layer = mobilenet.getLayer(trainingLayer);\n        const truncatedModel = tf.model({ inputs: mobilenet.inputs, outputs: layer.output });\n        const model = tf.sequential();\n        model.add(truncatedModel);\n        model.add(tf.layers.flatten());\n        return model;\n    }\n    else {\n        const layer = mobilenet.getLayer(trainingLayer);\n        const truncatedModel = tf.model({ inputs: mobilenet.inputs, outputs: layer.output });\n        const model = tf.sequential();\n        model.add(truncatedModel);\n        model.add(tf.layers.globalAveragePooling2d({})); // go from shape [7, 7, 1280] to [1280]\n        return model;\n    }\n}\n\nexport async function load(model: string, metadata?: string | Metadata ) {\n    const customModel = await tf.loadLayersModel(model);\n    const metadataJSON = metadata ? await processMetadata(metadata) : null;\n    return new CustomMobileNet(customModel, metadataJSON);\n}\n\nexport async function loadFromFiles(model: File, weights: File, metadata: File) {\n    const customModel = await tf.loadLayersModel(tf.io.browserFiles([model, weights]));\n    const metadataFile = await new Response(metadata).json();\n    const metadataJSON = metadata ? await processMetadata(metadataFile) : null;\n    return new CustomMobileNet(customModel, metadataJSON);\n}\n", "// A port of an algorithm by Johannes Baagøe <baagoe@baagoe.com>, 2010\n// http://baagoe.com/en/RandomMusings/javascript/\n// https://github.com/nquinlan/better-random-numbers-for-javascript-mirror\n// Original work is under MIT license -\n\n// Copyright (C) 2010 by Johannes Baagøe <baagoe@baagoe.org>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n// \n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n// \n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\n\n(function(global, module, define) {\n\nfunction Alea(seed) {\n  var me = this, mash = Mash();\n\n  me.next = function() {\n    var t = 2091639 * me.s0 + me.c * 2.3283064365386963e-10; // 2^-32\n    me.s0 = me.s1;\n    me.s1 = me.s2;\n    return me.s2 = t - (me.c = t | 0);\n  };\n\n  // Apply the seeding algorithm from Baagoe.\n  me.c = 1;\n  me.s0 = mash(' ');\n  me.s1 = mash(' ');\n  me.s2 = mash(' ');\n  me.s0 -= mash(seed);\n  if (me.s0 < 0) { me.s0 += 1; }\n  me.s1 -= mash(seed);\n  if (me.s1 < 0) { me.s1 += 1; }\n  me.s2 -= mash(seed);\n  if (me.s2 < 0) { me.s2 += 1; }\n  mash = null;\n}\n\nfunction copy(f, t) {\n  t.c = f.c;\n  t.s0 = f.s0;\n  t.s1 = f.s1;\n  t.s2 = f.s2;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new Alea(seed),\n      state = opts && opts.state,\n      prng = xg.next;\n  prng.int32 = function() { return (xg.next() * 0x100000000) | 0; }\n  prng.double = function() {\n    return prng() + (prng() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53\n  };\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nfunction Mash() {\n  var n = 0xefc8249d;\n\n  var mash = function(data) {\n    data = data.toString();\n    for (var i = 0; i < data.length; i++) {\n      n += data.charCodeAt(i);\n      var h = 0.02519603282416938 * n;\n      n = h >>> 0;\n      h -= n;\n      h *= n;\n      n = h >>> 0;\n      h -= n;\n      n += h * 0x100000000; // 2^32\n    }\n    return (n >>> 0) * 2.3283064365386963e-10; // 2^-32\n  };\n\n  return mash;\n}\n\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.alea = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n", "// A Javascript implementaion of the \"xor128\" prng algorithm by\n// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  me.x = 0;\n  me.y = 0;\n  me.z = 0;\n  me.w = 0;\n\n  // Set up generator function.\n  me.next = function() {\n    var t = me.x ^ (me.x << 11);\n    me.x = me.y;\n    me.y = me.z;\n    me.z = me.w;\n    return me.w ^= (me.w >>> 19) ^ t ^ (t >>> 8);\n  };\n\n  if (seed === (seed | 0)) {\n    // Integer seed.\n    me.x = seed;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 64; k++) {\n    me.x ^= strseed.charCodeAt(k) | 0;\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.x = f.x;\n  t.y = f.y;\n  t.z = f.z;\n  t.w = f.w;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xor128 = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n", "// A Javascript implementaion of the \"xorwow\" prng algorithm by\n// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  // Set up generator function.\n  me.next = function() {\n    var t = (me.x ^ (me.x >>> 2));\n    me.x = me.y; me.y = me.z; me.z = me.w; me.w = me.v;\n    return (me.d = (me.d + 362437 | 0)) +\n       (me.v = (me.v ^ (me.v << 4)) ^ (t ^ (t << 1))) | 0;\n  };\n\n  me.x = 0;\n  me.y = 0;\n  me.z = 0;\n  me.w = 0;\n  me.v = 0;\n\n  if (seed === (seed | 0)) {\n    // Integer seed.\n    me.x = seed;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 64; k++) {\n    me.x ^= strseed.charCodeAt(k) | 0;\n    if (k == strseed.length) {\n      me.d = me.x << 10 ^ me.x >>> 4;\n    }\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.x = f.x;\n  t.y = f.y;\n  t.z = f.z;\n  t.w = f.w;\n  t.v = f.v;\n  t.d = f.d;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xorwow = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n", "// A Javascript implementaion of the \"xorshift7\" algorithm by\n// François Panneton and Pierre L'ecuyer:\n// \"On the Xorgshift Random Number Generators\"\n// http://saluc.engr.uconn.edu/refs/crypto/rng/panneton05onthexorshift.pdf\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this;\n\n  // Set up generator function.\n  me.next = function() {\n    // Update xor generator.\n    var X = me.x, i = me.i, t, v, w;\n    t = X[i]; t ^= (t >>> 7); v = t ^ (t << 24);\n    t = X[(i + 1) & 7]; v ^= t ^ (t >>> 10);\n    t = X[(i + 3) & 7]; v ^= t ^ (t >>> 3);\n    t = X[(i + 4) & 7]; v ^= t ^ (t << 7);\n    t = X[(i + 7) & 7]; t = t ^ (t << 13); v ^= t ^ (t << 9);\n    X[i] = v;\n    me.i = (i + 1) & 7;\n    return v;\n  };\n\n  function init(me, seed) {\n    var j, w, X = [];\n\n    if (seed === (seed | 0)) {\n      // Seed state array using a 32-bit integer.\n      w = X[0] = seed;\n    } else {\n      // Seed state using a string.\n      seed = '' + seed;\n      for (j = 0; j < seed.length; ++j) {\n        X[j & 7] = (X[j & 7] << 15) ^\n            (seed.charCodeAt(j) + X[(j + 1) & 7] << 13);\n      }\n    }\n    // Enforce an array length of 8, not all zeroes.\n    while (X.length < 8) X.push(0);\n    for (j = 0; j < 8 && X[j] === 0; ++j);\n    if (j == 8) w = X[7] = -1; else w = X[j];\n\n    me.x = X;\n    me.i = 0;\n\n    // Discard an initial 256 values.\n    for (j = 256; j > 0; --j) {\n      me.next();\n    }\n  }\n\n  init(me, seed);\n}\n\nfunction copy(f, t) {\n  t.x = f.x.slice();\n  t.i = f.i;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  if (seed == null) seed = +(new Date);\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (state.x) copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xorshift7 = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n", "// A Javascript implementaion of Richard Brent's Xorgens xor4096 algorithm.\n//\n// This fast non-cryptographic random number generator is designed for\n// use in Monte-Carlo algorithms. It combines a long-period xorshift\n// generator with a Weyl generator, and it passes all common batteries\n// of stasticial tests for randomness while consuming only a few nanoseconds\n// for each prng generated.  For background on the generator, see Brent's\n// paper: \"Some long-period random number generators using shifts and xors.\"\n// http://arxiv.org/pdf/1004.3115v1.pdf\n//\n// Usage:\n//\n// var xor4096 = require('xor4096');\n// random = xor4096(1);                        // Seed with int32 or string.\n// assert.equal(random(), 0.1520436450538547); // (0, 1) range, 53 bits.\n// assert.equal(random.int32(), 1806534897);   // signed int32, 32 bits.\n//\n// For nonzero numeric keys, this impelementation provides a sequence\n// identical to that by Brent's xorgens 3 implementaion in C.  This\n// implementation also provides for initalizing the generator with\n// string seeds, or for saving and restoring the state of the generator.\n//\n// On Chrome, this prng benchmarks about 2.1 times slower than\n// Javascript's built-in Math.random().\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this;\n\n  // Set up generator function.\n  me.next = function() {\n    var w = me.w,\n        X = me.X, i = me.i, t, v;\n    // Update Weyl generator.\n    me.w = w = (w + 0x61c88647) | 0;\n    // Update xor generator.\n    v = X[(i + 34) & 127];\n    t = X[i = ((i + 1) & 127)];\n    v ^= v << 13;\n    t ^= t << 17;\n    v ^= v >>> 15;\n    t ^= t >>> 12;\n    // Update Xor generator array state.\n    v = X[i] = v ^ t;\n    me.i = i;\n    // Result is the combination.\n    return (v + (w ^ (w >>> 16))) | 0;\n  };\n\n  function init(me, seed) {\n    var t, v, i, j, w, X = [], limit = 128;\n    if (seed === (seed | 0)) {\n      // Numeric seeds initialize v, which is used to generates X.\n      v = seed;\n      seed = null;\n    } else {\n      // String seeds are mixed into v and X one character at a time.\n      seed = seed + '\\0';\n      v = 0;\n      limit = Math.max(limit, seed.length);\n    }\n    // Initialize circular array and weyl value.\n    for (i = 0, j = -32; j < limit; ++j) {\n      // Put the unicode characters into the array, and shuffle them.\n      if (seed) v ^= seed.charCodeAt((j + 32) % seed.length);\n      // After 32 shuffles, take v as the starting w value.\n      if (j === 0) w = v;\n      v ^= v << 10;\n      v ^= v >>> 15;\n      v ^= v << 4;\n      v ^= v >>> 13;\n      if (j >= 0) {\n        w = (w + 0x61c88647) | 0;     // Weyl.\n        t = (X[j & 127] ^= (v + w));  // Combine xor and weyl to init array.\n        i = (0 == t) ? i + 1 : 0;     // Count zeroes.\n      }\n    }\n    // We have detected all zeroes; make the key nonzero.\n    if (i >= 128) {\n      X[(seed && seed.length || 0) & 127] = -1;\n    }\n    // Run the generator 512 times to further mix the state before using it.\n    // Factoring this as a function slows the main generator, so it is just\n    // unrolled here.  The weyl generator is not advanced while warming up.\n    i = 127;\n    for (j = 4 * 128; j > 0; --j) {\n      v = X[(i + 34) & 127];\n      t = X[i = ((i + 1) & 127)];\n      v ^= v << 13;\n      t ^= t << 17;\n      v ^= v >>> 15;\n      t ^= t >>> 12;\n      X[i] = v ^ t;\n    }\n    // Storing state as object members is faster than using closure variables.\n    me.w = w;\n    me.X = X;\n    me.i = i;\n  }\n\n  init(me, seed);\n}\n\nfunction copy(f, t) {\n  t.i = f.i;\n  t.w = f.w;\n  t.X = f.X.slice();\n  return t;\n};\n\nfunction impl(seed, opts) {\n  if (seed == null) seed = +(new Date);\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (state.X) copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xor4096 = impl;\n}\n\n})(\n  this,                                     // window object or global\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n", "// A Javascript implementaion of the \"Tyche-i\" prng algorithm by\n// Samuel Neves and Filipe Araujo.\n// See https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  // Set up generator function.\n  me.next = function() {\n    var b = me.b, c = me.c, d = me.d, a = me.a;\n    b = (b << 25) ^ (b >>> 7) ^ c;\n    c = (c - d) | 0;\n    d = (d << 24) ^ (d >>> 8) ^ a;\n    a = (a - b) | 0;\n    me.b = b = (b << 20) ^ (b >>> 12) ^ c;\n    me.c = c = (c - d) | 0;\n    me.d = (d << 16) ^ (c >>> 16) ^ a;\n    return me.a = (a - b) | 0;\n  };\n\n  /* The following is non-inverted tyche, which has better internal\n   * bit diffusion, but which is about 25% slower than tyche-i in JS.\n  me.next = function() {\n    var a = me.a, b = me.b, c = me.c, d = me.d;\n    a = (me.a + me.b | 0) >>> 0;\n    d = me.d ^ a; d = d << 16 ^ d >>> 16;\n    c = me.c + d | 0;\n    b = me.b ^ c; b = b << 12 ^ d >>> 20;\n    me.a = a = a + b | 0;\n    d = d ^ a; me.d = d = d << 8 ^ d >>> 24;\n    me.c = c = c + d | 0;\n    b = b ^ c;\n    return me.b = (b << 7 ^ b >>> 25);\n  }\n  */\n\n  me.a = 0;\n  me.b = 0;\n  me.c = 2654435769 | 0;\n  me.d = 1367130551;\n\n  if (seed === Math.floor(seed)) {\n    // Integer seed.\n    me.a = (seed / 0x100000000) | 0;\n    me.b = seed | 0;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 20; k++) {\n    me.b ^= strseed.charCodeAt(k) | 0;\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.a = f.a;\n  t.b = f.b;\n  t.c = f.c;\n  t.d = f.d;\n  return t;\n};\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.tychei = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n", "/*\nCopyright 2014 David Bau.\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/\n\n(function (pool, math) {\n//\n// The following constants are related to IEEE 754 limits.\n//\n\n// Detect the global object, even if operating in strict mode.\n// http://stackoverflow.com/a/14387057/265298\nvar global = (0, eval)('this'),\n    width = 256,        // each RC4 output is 0 <= x < 256\n    chunks = 6,         // at least six RC4 outputs for each double\n    digits = 52,        // there are 52 significant digits in a double\n    rngname = 'random', // rngname: name for Math.random and Math.seedrandom\n    startdenom = math.pow(width, chunks),\n    significance = math.pow(2, digits),\n    overflow = significance * 2,\n    mask = width - 1,\n    nodecrypto;         // node.js crypto module, initialized at the bottom.\n\n//\n// seedrandom()\n// This is the seedrandom function described above.\n//\nfunction seedrandom(seed, options, callback) {\n  var key = [];\n  options = (options == true) ? { entropy: true } : (options || {});\n\n  // Flatten the seed string or build one from local entropy if needed.\n  var shortseed = mixkey(flatten(\n    options.entropy ? [seed, tostring(pool)] :\n    (seed == null) ? autoseed() : seed, 3), key);\n\n  // Use the seed to initialize an ARC4 generator.\n  var arc4 = new ARC4(key);\n\n  // This function returns a random double in [0, 1) that contains\n  // randomness in every bit of the mantissa of the IEEE 754 value.\n  var prng = function() {\n    var n = arc4.g(chunks),             // Start with a numerator n < 2 ^ 48\n        d = startdenom,                 //   and denominator d = 2 ^ 48.\n        x = 0;                          //   and no 'extra last byte'.\n    while (n < significance) {          // Fill up all significant digits by\n      n = (n + x) * width;              //   shifting numerator and\n      d *= width;                       //   denominator and generating a\n      x = arc4.g(1);                    //   new least-significant-byte.\n    }\n    while (n >= overflow) {             // To avoid rounding up, before adding\n      n /= 2;                           //   last byte, shift everything\n      d /= 2;                           //   right using integer math until\n      x >>>= 1;                         //   we have exactly the desired bits.\n    }\n    return (n + x) / d;                 // Form the number within [0, 1).\n  };\n\n  prng.int32 = function() { return arc4.g(4) | 0; }\n  prng.quick = function() { return arc4.g(4) / 0x100000000; }\n  prng.double = prng;\n\n  // Mix the randomness into accumulated entropy.\n  mixkey(tostring(arc4.S), pool);\n\n  // Calling convention: what to return as a function of prng, seed, is_math.\n  return (options.pass || callback ||\n      function(prng, seed, is_math_call, state) {\n        if (state) {\n          // Load the arc4 state from the given state if it has an S array.\n          if (state.S) { copy(state, arc4); }\n          // Only provide the .state method if requested via options.state.\n          prng.state = function() { return copy(arc4, {}); }\n        }\n\n        // If called as a method of Math (Math.seedrandom()), mutate\n        // Math.random because that is how seedrandom.js has worked since v1.0.\n        if (is_math_call) { math[rngname] = prng; return seed; }\n\n        // Otherwise, it is a newer calling convention, so return the\n        // prng directly.\n        else return prng;\n      })(\n  prng,\n  shortseed,\n  'global' in options ? options.global : (this == math),\n  options.state);\n}\nmath['seed' + rngname] = seedrandom;\n\n//\n// ARC4\n//\n// An ARC4 implementation.  The constructor takes a key in the form of\n// an array of at most (width) integers that should be 0 <= x < (width).\n//\n// The g(count) method returns a pseudorandom integer that concatenates\n// the next (count) outputs from ARC4.  Its return value is a number x\n// that is in the range 0 <= x < (width ^ count).\n//\nfunction ARC4(key) {\n  var t, keylen = key.length,\n      me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];\n\n  // The empty key [] is treated as [0].\n  if (!keylen) { key = [keylen++]; }\n\n  // Set up S using the standard key scheduling algorithm.\n  while (i < width) {\n    s[i] = i++;\n  }\n  for (i = 0; i < width; i++) {\n    s[i] = s[j = mask & (j + key[i % keylen] + (t = s[i]))];\n    s[j] = t;\n  }\n\n  // The \"g\" method returns the next (count) outputs as one number.\n  (me.g = function(count) {\n    // Using instance members instead of closure state nearly doubles speed.\n    var t, r = 0,\n        i = me.i, j = me.j, s = me.S;\n    while (count--) {\n      t = s[i = mask & (i + 1)];\n      r = r * width + s[mask & ((s[i] = s[j = mask & (j + t)]) + (s[j] = t))];\n    }\n    me.i = i; me.j = j;\n    return r;\n    // For robust unpredictability, the function call below automatically\n    // discards an initial batch of values.  This is called RC4-drop[256].\n    // See http://google.com/search?q=rsa+fluhrer+response&btnI\n  })(width);\n}\n\n//\n// copy()\n// Copies internal state of ARC4 to or from a plain object.\n//\nfunction copy(f, t) {\n  t.i = f.i;\n  t.j = f.j;\n  t.S = f.S.slice();\n  return t;\n};\n\n//\n// flatten()\n// Converts an object tree to nested arrays of strings.\n//\nfunction flatten(obj, depth) {\n  var result = [], typ = (typeof obj), prop;\n  if (depth && typ == 'object') {\n    for (prop in obj) {\n      try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}\n    }\n  }\n  return (result.length ? result : typ == 'string' ? obj : obj + '\\0');\n}\n\n//\n// mixkey()\n// Mixes a string seed into a key that is an array of integers, and\n// returns a shortened string seed that is equivalent to the result key.\n//\nfunction mixkey(seed, key) {\n  var stringseed = seed + '', smear, j = 0;\n  while (j < stringseed.length) {\n    key[mask & j] =\n      mask & ((smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++));\n  }\n  return tostring(key);\n}\n\n//\n// autoseed()\n// Returns an object for autoseeding, using window.crypto and Node crypto\n// module if available.\n//\nfunction autoseed() {\n  try {\n    var out;\n    if (nodecrypto && (out = nodecrypto.randomBytes)) {\n      // The use of 'out' to remember randomBytes makes tight minified code.\n      out = out(width);\n    } else {\n      out = new Uint8Array(width);\n      (global.crypto || global.msCrypto).getRandomValues(out);\n    }\n    return tostring(out);\n  } catch (e) {\n    var browser = global.navigator,\n        plugins = browser && browser.plugins;\n    return [+new Date, global, plugins, global.screen, tostring(pool)];\n  }\n}\n\n//\n// tostring()\n// Converts an array of charcodes to a string\n//\nfunction tostring(a) {\n  return String.fromCharCode.apply(0, a);\n}\n\n//\n// When seedrandom.js is loaded, we immediately mix a few bits\n// from the built-in RNG into the entropy pool.  Because we do\n// not want to interfere with deterministic PRNG state later,\n// seedrandom will not call math.random on its own again after\n// initialization.\n//\nmixkey(math.random(), pool);\n\n//\n// Nodejs and AMD support: export the implementation as a module using\n// either convention.\n//\nif ((typeof module) == 'object' && module.exports) {\n  module.exports = seedrandom;\n  // When in node.js, try using crypto package for autoseeding.\n  try {\n    nodecrypto = require('crypto');\n  } catch (ex) {}\n} else if ((typeof define) == 'function' && define.amd) {\n  define(function() { return seedrandom; });\n}\n\n// End anonymous scope, and pass initial values.\n})(\n  [],     // pool: entropy pool starts empty\n  Math    // math: package containing random, pow, and seedrandom\n);\n", "// A library of seedable RNGs implemented in Javascript.\n//\n// Usage:\n//\n// var seedrandom = require('seedrandom');\n// var random = seedrandom(1); // or any seed.\n// var x = random();       // 0 <= x < 1.  Every bit is random.\n// var x = random.quick(); // 0 <= x < 1.  32 bits of randomness.\n\n// alea, a 53-bit multiply-with-carry generator by Johannes Baagøe.\n// Period: ~2^116\n// Reported to pass all BigCrush tests.\nvar alea = require('./lib/alea');\n\n// xor128, a pure xor-shift generator by George Marsaglia.\n// Period: 2^128-1.\n// Reported to fail: MatrixRank and LinearComp.\nvar xor128 = require('./lib/xor128');\n\n// xorwow, George Marsaglia's 160-bit xor-shift combined plus weyl.\n// Period: 2^192-2^32\n// Reported to fail: CollisionOver, SimpPoker, and LinearComp.\nvar xorwow = require('./lib/xorwow');\n\n// xorshift7, by François Panneton and Pierre L'ecuyer, takes\n// a different approach: it adds robustness by allowing more shifts\n// than Marsaglia's original three.  It is a 7-shift generator\n// with 256 bits, that passes BigCrush with no systmatic failures.\n// Period 2^256-1.\n// No systematic BigCrush failures reported.\nvar xorshift7 = require('./lib/xorshift7');\n\n// xor4096, by Richard Brent, is a 4096-bit xor-shift with a\n// very long period that also adds a Weyl generator. It also passes\n// BigCrush with no systematic failures.  Its long period may\n// be useful if you have many generators and need to avoid\n// collisions.\n// Period: 2^4128-2^32.\n// No systematic BigCrush failures reported.\nvar xor4096 = require('./lib/xor4096');\n\n// Tyche-i, by Samuel Neves and Filipe Araujo, is a bit-shifting random\n// number generator derived from ChaCha, a modern stream cipher.\n// https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf\n// Period: ~2^127\n// No systematic BigCrush failures reported.\nvar tychei = require('./lib/tychei');\n\n// The original ARC4-based prng included in this library.\n// Period: ~2^1600\nvar sr = require('./seedrandom');\n\nsr.alea = alea;\nsr.xor128 = xor128;\nsr.xorwow = xorwow;\nsr.xorshift7 = xorshift7;\nsr.xor4096 = xor4096;\nsr.tychei = tychei;\n\nmodule.exports = sr;\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '@tensorflow/tfjs';\nimport { util, Rank } from '@tensorflow/tfjs';\nimport { capture } from './utils/tf';\nimport { TensorContainer } from '@tensorflow/tfjs-core/dist/tensor_types';\nimport { CustomCallbackArgs } from '@tensorflow/tfjs';\nimport { CustomMobileNet,\n    Metadata,\n    loadTruncatedMobileNet,\n    ClassifierInputSource,\n    ModelOptions\n} from './custom-mobilenet';\nimport * as seedrandom from 'seedrandom';\nimport { Initializer } from '@tensorflow/tfjs-layers/dist/initializers';\n\nconst VALIDATION_FRACTION = 0.15;\n\nexport interface TrainingParameters {\n    denseUnits: number;\n    epochs: number;\n    learningRate: number;\n    batchSize: number;\n}\n\ninterface Sample {\n    data: Float32Array;\n    label: number[];\n}\n\n// tslint:disable-next-line:no-any\nconst isTensor = (c: any): c is tf.Tensor =>\n    typeof c.dataId === 'object' && typeof c.shape === 'object';\n\n/**\n * Converts an integer into its one-hot representation and returns\n * the data as a JS Array.\n */\nfunction flatOneHot(label: number, numClasses: number) {\n    const labelOneHot = new Array(numClasses).fill(0) as number[];\n    labelOneHot[label] = 1;\n\n    return labelOneHot;\n}\n\n/**\n * Shuffle an array of Float32Array or Samples using Fisher-Yates algorithm\n * Takes an optional seed value to make shuffling predictable\n */\nfunction fisherYates(array: Float32Array[] | Sample[], seed?: seedrandom.prng) {\n    const length = array.length;\n\n    // need to clone array or we'd be editing original as we goo\n    const shuffled = array.slice();\n\n    for (let i = (length - 1); i > 0; i -= 1) {\n        let randomIndex ;\n        if (seed) {\n            randomIndex = Math.floor(seed() * (i + 1));\n        }\n        else {\n            randomIndex = Math.floor(Math.random() * (i + 1));\n        }\n\n        [shuffled[i], shuffled[randomIndex]] = [shuffled[randomIndex],shuffled[i]];\n    }\n\n    return shuffled;\n}\n\nexport class TeachableMobileNet extends CustomMobileNet {\n    /**\n     * the training model for transfer learning\n     */\n    protected trainingModel: tf.LayersModel;\n\n    /**\n     * Training and validation datasets\n     */\n    private trainDataset: tf.data.Dataset<TensorContainer>;\n    private validationDataset: tf.data.Dataset<TensorContainer>;\n\n    private __stopTrainingResolve: () => void;\n    // private __stopTrainingReject: (error: Error) => void;\n\n    // Number of total samples\n    private totalSamples = 0;\n\n    // Array of all the examples collected\n    public examples: Float32Array[][] = [];\n\n    // Optional seed to make shuffling of data predictable\n    private seed: seedrandom.prng;\n\n    constructor(truncated: tf.LayersModel, metadata: Partial<Metadata>) {\n        super(tf.sequential(), metadata);\n        // the provided model is the truncated mobilenet\n        this.truncatedModel = truncated;\n    }\n\n    public get asSequentialModel() {\n        return this.model as tf.Sequential;\n    }\n\n\n    /**\n     * has the teachable model been trained?\n     */\n    public get isTrained() {\n        return !!this.model && this.model.layers && this.model.layers.length > 2;\n    }\n\n    /**\n     * has the dataset been prepared with all labels and samples processed?\n     */\n    public get isPrepared() {\n        return !!this.trainDataset;\n    }\n\n    /**\n     * how many classes are in the dataset?\n     */\n    public get numClasses(): number {\n        return this._metadata.labels.length;\n    }\n\n    /**\n     * Add a sample of data under the provided className\n     * @param className the classification this example belongs to\n     * @param sample the image / tensor that belongs in this classification\n     */\n    // public async addExample(className: number, sample: HTMLCanvasElement | tf.Tensor) {\n    public async addExample(className: number, sample: HTMLImageElement | HTMLCanvasElement | tf.Tensor) {\n        const cap = isTensor(sample) ? sample : capture(sample, this._metadata.grayscale);\n        const example = this.truncatedModel.predict(cap) as tf.Tensor;\n\n        const activation = example.dataSync() as Float32Array;\n        cap.dispose();\n        example.dispose();\n\n        // save samples of each class separately\n        this.examples[className].push(activation);\n\n        // increase our sample counter\n        this.totalSamples++;\n    }\n\n    /**\n     * Classify an input image / Tensor with your trained model. Return all results.\n     * @param image the input image / Tensor to classify against your model\n     * @param topK how many of the top results do you want? defautls to 3\n     */\n    public async predict(image: ClassifierInputSource, flipped = false) {\n        if (!this.model) {\n            throw new Error('Model has not been trained yet, called train() first');\n        }\n        return super.predict(image, flipped);\n    }\n\n    /**\n     * Classify an input image / Tensor with your trained model. Return topK results\n     * @param image the input image / Tensor to classify against your model\n     * @param maxPredictions how many of the top results do you want? defautls to 3\n     * @param flipped whether to flip an image\n     */\n    public async predictTopK(image: ClassifierInputSource, maxPredictions = 10, flipped = false, ) {\n        if (!this.model) {\n            throw new Error('Model has not been trained yet, called train() first');\n        }\n        return super.predictTopK(image, maxPredictions, flipped);\n    }\n\n    /**\n     * process the current examples provided to calculate labels and format\n     * into proper tf.data.Dataset\n     */\n    public prepare() {\n        for (const classes in this.examples){\n            if (classes.length === 0) {\n                throw new Error('Add some examples before training');\n            }\n        }\n\n        const datasets = this.convertToTfDataset();\n        this.trainDataset = datasets.trainDataset;\n        this.validationDataset = datasets.validationDataset;\n    }\n\n    /**\n     * Process the examples by first shuffling randomly per class, then adding\n     * one-hot labels, then splitting into training/validation datsets, and finally\n     * sorting one last time\n     */\n    private convertToTfDataset() {\n        // first shuffle each class individually\n        // TODO: we could basically replicate this by insterting randomly\n        for (let i = 0; i < this.examples.length; i++) {\n            this.examples[i] = fisherYates(this.examples[i], this.seed) as Float32Array[];\n        }\n\n        // then break into validation and test datasets\n\n        let trainDataset: Sample[] = [];\n        let validationDataset: Sample[] = [];\n\n        // for each class, add samples to train and validation dataset\n        for (let i = 0; i < this.examples.length; i++) {\n            const y = flatOneHot(i, this.numClasses);\n\n            const classLength = this.examples[i].length;\n            const numValidation = Math.ceil(VALIDATION_FRACTION * classLength);\n            const numTrain = classLength - numValidation;\n\n            const classTrain = this.examples[i].slice(0, numTrain).map((dataArray) => {\n                return { data: dataArray, label: y };\n            });\n\n            const classValidation = this.examples[i].slice(numTrain).map((dataArray) => {\n                return { data: dataArray, label: y };\n            });\n\n            trainDataset = trainDataset.concat(classTrain);\n            validationDataset = validationDataset.concat(classValidation);\n        }\n\n        // finally shuffle both train and validation datasets\n        trainDataset = fisherYates(trainDataset, this.seed) as Sample[];\n        validationDataset = fisherYates(validationDataset, this.seed) as Sample[];\n\n        const trainX = tf.data.array(trainDataset.map(sample => sample.data));\n        const validationX = tf.data.array(validationDataset.map(sample => sample.data));\n        const trainY = tf.data.array(trainDataset.map(sample => sample.label));\n        const validationY = tf.data.array(validationDataset.map(sample => sample.label));\n\n        // return tf.data dataset objects\n        return {\n            trainDataset: tf.data.zip({ xs: trainX,  ys: trainY}),\n            validationDataset: tf.data.zip({ xs: validationX,  ys: validationY})\n        };\n    }\n\n    /**\n     * Saving `model`'s topology and weights as two files\n     * (`my-model-1.json` and `my-model-1.weights.bin`) as well as\n     * a `metadata.json` file containing metadata such as text labels to be\n     * downloaded from browser.\n     * @param handlerOrURL An instance of `IOHandler` or a URL-like,\n     * scheme-based string shortcut for `IOHandler`.\n     * @param config Options for saving the model.\n     * @returns A `Promise` of `SaveResult`, which summarizes the result of\n     * the saving, such as byte sizes of the saved artifacts for the model's\n     *   topology and weight values.\n     */\n    public async save(handlerOrURL: tf.io.IOHandler | string, config?: tf.io.SaveConfig): Promise<tf.io.SaveResult> {\n        return this.model.save(handlerOrURL, config);\n    }\n\n    /**\n     * Train your data into a new model and join it with mobilenet\n     * @param params the parameters for the model / training\n     * @param callbacks provide callbacks to receive training events\n     */\n    public async train(params: TrainingParameters, callbacks: CustomCallbackArgs = {}) {\n        // Add callback for onTrainEnd in case of early stop\n        const originalOnTrainEnd = callbacks.onTrainEnd || (() => {});\n        callbacks.onTrainEnd = (logs: tf.Logs) => {\n            if (this.__stopTrainingResolve) {\n                this.__stopTrainingResolve();\n                this.__stopTrainingResolve = null;\n            }\n            originalOnTrainEnd(logs);\n        };\n        \n        // Rest of trian function\n        if (!this.isPrepared) {\n            this.prepare();\n        }\n\n        const numLabels = this.getLabels().length;\n        util.assert(\n            numLabels === this.numClasses,\n            () => `Can not train, has ${numLabels} labels and ${this.numClasses} classes`);\n\n        const inputShape = this.truncatedModel.outputs[0].shape.slice(1); // [ 7 x 7 x 1280]\n        const inputSize = tf.util.sizeFromShape(inputShape);\n\n        // in case we need to use a seed for predictable training\n        let varianceScaling: Initializer;\n        if (this.seed) {\n            varianceScaling = tf.initializers.varianceScaling({ seed: 3.14});\n        }\n        else {\n            varianceScaling = tf.initializers.varianceScaling({});\n        }\n\n        this.trainingModel = tf.sequential({\n            layers: [\n                tf.layers.dense({\n                    inputShape: [inputSize],\n                    units: params.denseUnits,\n                    activation: 'relu',\n                    kernelInitializer: varianceScaling, // 'varianceScaling'\n                    useBias: true\n                }),\n                tf.layers.dense({\n                    kernelInitializer: varianceScaling, // 'varianceScaling'\n                    useBias: false,\n                    activation: 'softmax',\n                    units: this.numClasses\n                })\n            ]\n        });\n\n        const optimizer = tf.train.adam(params.learningRate);\n        // const optimizer = tf.train.rmsprop(params.learningRate);\n\n        this.trainingModel.compile({\n            optimizer,\n            // loss: 'binaryCrossentropy',\n            loss: 'categoricalCrossentropy',\n            metrics: ['accuracy']\n        });\n\n        if (!(params.batchSize > 0)) {\n            throw new Error(\n            `Batch size is 0 or NaN. Please choose a non-zero fraction`\n            );\n        }\n\n        const trainData = this.trainDataset.batch(params.batchSize);\n        const validationData = this.validationDataset.batch(params.batchSize);\n\n        // For debugging: check for shuffle or result from trainDataset\n        /*\n        await trainDataset.forEach((e: tf.Tensor[]) => {\n            console.log(e);\n        })\n        */\n\n        const history = await this.trainingModel.fitDataset(trainData, {\n            epochs: params.epochs,\n            validationData,\n            callbacks\n        });\n\n        const jointModel = tf.sequential();\n        jointModel.add(this.truncatedModel);\n        jointModel.add(this.trainingModel);\n        this.model = jointModel;\n\n        optimizer.dispose(); // cleanup of memory\n\n        return this.model;\n    }\n\n    /*\n     * Setup the exampls array to hold samples per class\n     */\n    public prepareDataset() {\n        for (let i = 0; i < this.numClasses; i++) {\n            this.examples[i] = [];\n        }\n    }\n\n    public setLabel(index: number, label: string) {\n        this._metadata.labels[index] = label;\n    }\n\n    public setLabels(labels: string[]) {\n        this._metadata.labels = labels;\n        this.prepareDataset();\n    }\n\n    public getLabel(index: number) {\n        return this._metadata.labels[index];\n    }\n\n    public getLabels() {\n        return this._metadata.labels;\n    }\n\n    public setName(name: string) {\n        this._metadata.modelName = name;\n    }\n\n    public getName() {\n        return this._metadata.modelName;\n    }\n\n    public stopTraining() {  \n        const promise = new Promise((resolve, reject) => {\n            this.trainingModel.stopTraining = true;\n            this.__stopTrainingResolve = resolve;\n            // this.__stopTrainingReject = reject;\n        });\n        \n        return promise;\n    }\n\n    public dispose() {\n        this.trainingModel.dispose();\n        super.dispose();\n    }\n\n    /* \n     * Calculate each class accuracy using the validation dataset\n     */\n    public async calculateAccuracyPerClass() {\n        const validationXs = this.validationDataset.mapAsync(async (dataset: TensorContainer) => {\n            return (dataset as { xs: TensorContainer, ys: TensorContainer}).xs;\n        });\n        const validationYs = this.validationDataset.mapAsync(async (dataset: TensorContainer) => {\n            return (dataset as { xs: TensorContainer, ys: TensorContainer}).ys;\n        });\n\n        // we need to split our validation data into batches in case it is too large to fit in memory\n        const batchSize = Math.min(validationYs.size, 32);\n        const iterations = Math.ceil(validationYs.size / batchSize);\n\n        const batchesX = validationXs.batch(batchSize);\n        const batchesY = validationYs.batch(batchSize);\n        const itX = await batchesX.iterator();\n        const itY = await batchesY.iterator();\n        const allX = [];\n        const allY = [];\n\n        for (let i = 0; i < iterations; i++) {\n            // 1. get the prediction values in batches\n            const batchedXTensor = await itX.next();\n            const batchedXPredictionTensor = this.trainingModel.predict(batchedXTensor.value) as tf.Tensor;\n            const argMaxX = batchedXPredictionTensor.argMax(1); // Returns the indices of the max values along an axis\n            allX.push(argMaxX);\n\n            // 2. get the ground truth label values in batches\n            const batchedYTensor = await itY.next();\n            const argMaxY = batchedYTensor.value.argMax(1); // Returns the indices of the max values along an axis\n            allY.push(argMaxY);\n\n            // 3. dispose of all our tensors\n            batchedXTensor.value.dispose();\n            batchedXPredictionTensor.dispose();\n            batchedYTensor.value.dispose();\n        }\n\n        // concatenate all the results of the batches\n        const reference = tf.concat(allY); // this is the ground truth\n        const predictions = tf.concat(allX); // this is the prediction our model is guessing\n\n        // only if we concatenated more than one tensor for preference and reference\n        if (iterations !== 1) {\n            for (let i = 0; i < allX.length; i++) {\n                allX[i].dispose();\n                allY[i].dispose();\n            }\n        }\n\n        return { reference, predictions };\n    }\n\n    /*\n     * optional seed for predictable shuffling of dataset\n     */\n    public setSeed(seed: string) {\n        this.seed = seedrandom(seed);\n    }\n}\n\nexport async function createTeachable(metadata: Partial<Metadata>, modelOptions?: ModelOptions) {\n    const mobilenet = await loadTruncatedMobileNet(modelOptions);\n    return new TeachableMobileNet(mobilenet, metadata);\n}\n", "function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n * Return a descriptor removing the value and returning a getter\n * The getter will return a .bind version of the function\n * and memoize the result against a symbol on the instance\n */\nexport function boundMethod(target, key, descriptor) {\n  var fn = descriptor.value;\n\n  if (typeof fn !== 'function') {\n    throw new TypeError(\"@boundMethod decorator can only be applied to methods not: \".concat(_typeof(fn)));\n  } // In IE11 calling Object.defineProperty has a side-effect of evaluating the\n  // getter for the property which is being replaced. This causes infinite\n  // recursion and an \"Out of stack space\" error.\n\n\n  var definingProperty = false;\n  return {\n    configurable: true,\n    get: function get() {\n      // eslint-disable-next-line no-prototype-builtins\n      if (definingProperty || this === target.prototype || this.hasOwnProperty(key) || typeof fn !== 'function') {\n        return fn;\n      }\n\n      var boundFn = fn.bind(this);\n      definingProperty = true;\n      Object.defineProperty(this, key, {\n        configurable: true,\n        get: function get() {\n          return boundFn;\n        },\n        set: function set(value) {\n          fn = value;\n          delete this[key];\n        }\n      });\n      definingProperty = false;\n      return boundFn;\n    },\n    set: function set(value) {\n      fn = value;\n    }\n  };\n}\n/**\n * Use boundMethod to bind all methods on the target.prototype\n */\n\nexport function boundClass(target) {\n  // (Using reflect to get all keys including symbols)\n  var keys; // Use Reflect if exists\n\n  if (typeof Reflect !== 'undefined' && typeof Reflect.ownKeys === 'function') {\n    keys = Reflect.ownKeys(target.prototype);\n  } else {\n    keys = Object.getOwnPropertyNames(target.prototype); // Use symbols if support is provided\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      keys = keys.concat(Object.getOwnPropertySymbols(target.prototype));\n    }\n  }\n\n  keys.forEach(function (key) {\n    // Ignore special case target method\n    if (key === 'constructor') {\n      return;\n    }\n\n    var descriptor = Object.getOwnPropertyDescriptor(target.prototype, key); // Only methods need binding\n\n    if (typeof descriptor.value === 'function') {\n      Object.defineProperty(target.prototype, key, boundMethod(target, key, descriptor));\n    }\n  });\n  return target;\n}\nexport default function autobind() {\n  if (arguments.length === 1) {\n    return boundClass.apply(void 0, arguments);\n  }\n\n  return boundMethod.apply(void 0, arguments);\n}", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport autobind from 'autobind-decorator';\nimport { cropTo } from './canvas';\n\nconst defaultVideoOptions: MediaTrackConstraints = {\n    facingMode: 'user',\n    frameRate: 24\n};\n\nconst fillConstraints = (options: Partial<MediaTrackConstraints>) => {\n    options.facingMode = options.facingMode || defaultVideoOptions.facingMode;\n    options.frameRate = options.frameRate || defaultVideoOptions.frameRate;\n    options.aspectRatio = options.aspectRatio || defaultVideoOptions.aspectRatio;\n    return options as MediaTrackConstraints;\n};\n\nexport class Webcam  {\n    public flip: boolean;\n    public width: number;\n    public height: number;\n    public webcam: HTMLVideoElement;\n    public canvas: HTMLCanvasElement;\n\n    constructor(width = 400, height = 400, flip = false) {\n        this.width = width;\n        this.height = height;\n        this.flip = flip;\n    }\n\n    @autobind\n    public getWebcam(options: MediaTrackConstraints = {}) {\n        if (!window.navigator.mediaDevices || !window.navigator.mediaDevices.getUserMedia) {\n            return Promise.reject('Your browser does not support WebRTC. Please try another one.');\n        }\n    \n        options.width = 640;\n        const videoOptions = fillConstraints(options);\n\n        const video = document.createElement('video');\n        return window.navigator.mediaDevices.getUserMedia({ video: videoOptions })\n            .then((mediaStream) => {\n                video.srcObject = mediaStream;\n\n                video.addEventListener('loadedmetadata', (event: Event) => {\n                    const { videoWidth: vw, videoHeight: vh } = video;\n                    video.width = vw;\n                    video.height = vh;\n                });\n\n                return video;\n            }, () => {\n                return Promise.reject('Could not open your camera. You may have denied access.');\n            });\n    }\n\n    // setup or setupWebcam\n    @autobind\n    public async setup(options: MediaTrackConstraints = {}) {\n        if (!this.webcam) {\n            this.webcam = await this.getWebcam(options);\n\n            if (!this.canvas) {\n                this.canvas = document.createElement('canvas');\n                this.canvas.width = this.width;\n                this.canvas.height = this.height;\n            }\n        }\n    }\n\n    @autobind\n    public play() {\n        const promise = this.webcam.play();\n        return promise;\n    }\n\n    @autobind\n    public pause() {\n        this.webcam.pause();\n    }\n\n    @autobind\n    public stop() {\n        this.stopStreamedVideo(this.webcam);\n    }\n\n    @autobind\n    public update() {\n        this.renderCameraToCanvas();\n    }\n\n    @autobind\n    public stopStreamedVideo(videoEl: HTMLVideoElement) {\n        const stream = videoEl.srcObject as MediaStream;\n        const tracks = stream.getTracks();\n\n        tracks.forEach((track) => {\n            track.stop();\n        });\n\n        videoEl.srcObject = null;\n    }\n\n    @autobind\n    public renderCameraToCanvas() {\n        if (this.canvas && this.webcam) {\n            const ctx = this.canvas.getContext('2d');\n\n           if (this.webcam.videoWidth !== 0) {\n               const croppedCanvas = cropTo(this.webcam, this.width, this.flip);\n               ctx.drawImage(croppedCanvas, 0, 0);\n           }\n        }\n    }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport {\n    Metadata,\n    IMAGE_SIZE,\n    ClassifierInputSource,\n    CustomMobileNet,\n    load,\n    loadFromFiles,\n    loadTruncatedMobileNet\n} from './custom-mobilenet';\n\nexport { TeachableMobileNet, createTeachable } from './teachable-mobilenet';\nexport { Webcam } from './utils/webcam';\nexport { version } from './version';\n"],
  "mappings": "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",
  "names": ["CustomMobileNet", "module", "define", "module", "define", "module", "define", "module", "define", "me", "seed", "module", "define", "me", "seed", "module", "define", "prng", "seed", "t", "i", "j", "s", "require_seedrandom", "TeachableMobileNet", "i", "_typeof", "obj", "get", "Webcam"]
}
